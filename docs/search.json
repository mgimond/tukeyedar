[{"path":"https://mgimond.github.io/tukeyedar/articles/polish.html","id":"the-median-polish-basics","dir":"Articles","previous_headings":"","what":"The median polish basics","title":"Median polish","text":"median polish exploratory technique used extract effects two-way table. , median polish can thought robust version two-way ANOVA–goal characterize role factor contributing towards expected value. iteratively extracting effects associated row column factors via medians. example, given two-way table 1964 1966 infant mortality rates1 (reported count per 1000 live births) computed combination geographic region (NE, NC, S, W) level father’s educational attainment (ed8, ed9-11, ed12, ed13-15, ed16), median polish first extract overall median value, smooth residual rates first extracting median values along column (thus contributing column factor), smoothing remaining residual rates extracting median values along row (thus contributing row factor). smoothing operation iterated residuals stabilize. example workflow highlighted following figure.  left-table original data showing death rates. second table shows outcome first round polishing (including initial overall median value 20.2). third forth table show second third iterations smoothing operations. Additional iterations deemed necessary given little can extracted residuals. detailed step--step explanation workflow see . resulting model additive form : \\[ y_{ij} = \\mu + \\alpha_{} + \\beta_{j} +\\epsilon_{ij} \\] \\(y_{ij}\\) response variable row \\(\\) column \\(j\\), \\(\\mu\\) overall typical value (hereafter referred common value), \\(\\alpha_{}\\) row effect, \\(\\beta_{j}\\) column effect \\(\\epsilon_{ij}\\) residual value left effects taken account. factor’s levels displayed top row left-column. example, region assigned rows father’s educational attainment assigned columns. father’s educational attainment can explain 11 units variability (7.58 - (-3.45)) death rates vs 4 units variability region (2.55 - (-1.5)). , father’s educational attainment larger contributor expected infant mortality regional effect.","code":""},{"path":"https://mgimond.github.io/tukeyedar/articles/polish.html","id":"implementing-the-median-polish","dir":"Articles","previous_headings":"","what":"Implementing the median polish","title":"Median polish","text":"package’s eda_polish augmented version built-medpolish available via stats package. key difference eda_polish takes input dataset long form opposed medpolish takes dataset form matrix. example, infant mortality dataset needs consist least three columns: one variable (two factors expected value). median polish can executed follows:  function output table plot along list components stored M1 object. want suppress plot, can set parameter plot = FALSE. M1 object class eda_polish. can extract common values, row column effects follows:","code":"grd <- c(\"ed8\", \"ed9-11\", \"ed12\", \"ed13-15\", \"ed16\") dat <- data.frame(region =  rep( c(\"NE\", \"NC\", \"S\", \"W\"), each = 5),                   edu = factor(rep( grd , 4), levels = grd),                   perc = c(25.3, 25.3, 18.2, 18.3, 16.3, 32.1, 29, 18.8,                            24.3, 19, 38.8, 31, 19.3, 15.7, 16.8, 25.4,                             21.1, 20.3, 24, 17.5)) head(dat)     region     edu perc   1     NE     ed8 25.3   2     NE  ed9-11 25.3   3     NE    ed12 18.2   4     NE ed13-15 18.3   5     NE    ed16 16.3   6     NC     ed8 32.1 library(tukeyedar) M1 <- eda_pol(dat, row = region, col = edu, val = perc) M1$global   [1] 20.85 M1$row     region  effect   1     NC  2.3000   2     NE -1.4625   3      S -0.3500   4      W  0.3500 M1$col         edu   effect   1     ed8  7.43125   2  ed9-11  5.88125   3    ed12 -1.19375   4 ed13-15  0.03125   5    ed16 -3.70000"},{"path":"https://mgimond.github.io/tukeyedar/articles/polish.html","id":"ordering-rows-and-columns-by-effect-values","dir":"Articles","previous_headings":"Implementing the median polish","what":"Ordering rows and columns by effect values","title":"Median polish","text":"order row column effects effect values, set sort parameter TRUE.","code":"M1 <- eda_pol(dat, row = region, col = edu, val = perc, sort = TRUE)"},{"path":"https://mgimond.github.io/tukeyedar/articles/polish.html","id":"applying-a-transformation-to-the-data","dir":"Articles","previous_headings":"Implementing the median polish","what":"Applying a transformation to the data","title":"Median polish","text":"can function re-express values prior performing polish. example, log transform data, pass value 0 p.  re-expressing data using negative power, choice adopting Tukey transformation (tukey = TRUE) Box-Cox transformation (tukey = FALSE). example, apply power transformation -0.1 using Box-Cox transformation, type:","code":"M1 <- eda_pol(dat, row = region, col = edu, val = perc, p = 0) M1 <- eda_pol(dat, row = region, col = edu, val = perc, p = -0.1, tukey = FALSE)"},{"path":"https://mgimond.github.io/tukeyedar/articles/polish.html","id":"defining-the-statistic","dir":"Articles","previous_headings":"Implementing the median polish","what":"Defining the statistic","title":"Median polish","text":"default, polishing routine adopts median statistic. can adopt statistic via stat parameter. example, apply mean polish, type:","code":"M1 <- eda_pol(dat, row = region, col = edu, val = perc, stat = mean)"},{"path":"https://mgimond.github.io/tukeyedar/articles/polish.html","id":"the-eda_polish-plot-method","dir":"Articles","previous_headings":"","what":"The eda_polish plot method","title":"Median polish","text":"list object created eda_pol function class eda_polish. , plot method created class. plot method either output original polished table (type = \"residuals\"), diagnostic plot (type = \"diagnostic\"), CV values (cv).","code":""},{"path":"https://mgimond.github.io/tukeyedar/articles/polish.html","id":"plot-the-median-polish-table","dir":"Articles","previous_headings":"","what":"Plot the median polish table","title":"Median polish","text":"can generate plot table median polish model follows:","code":"M1 <- eda_pol(dat, row = region, col = edu, val = perc, plot = FALSE) plot(M1)"},{"path":[]},{"path":"https://mgimond.github.io/tukeyedar/articles/polish.html","id":"excluding-common-effect-from-the-color-palette-range","dir":"Articles","previous_headings":"Adjusting color schemes","what":"Excluding common effect from the color palette range","title":"Median polish","text":"default, range color palettes defined range values table–includes common effect value. prevent common value affecting distribution color palettes, set col.com FALSE.  Note distribution colors maximized help improve view effects. view makes clear father’s educational attainment greater effect region.","code":"plot(M1, col.com = FALSE)"},{"path":"https://mgimond.github.io/tukeyedar/articles/polish.html","id":"excluding-rowcolumn-effects-from-the-color-palette-range","dir":"Articles","previous_headings":"Adjusting color schemes","what":"Excluding row/column effects from the color palette range","title":"Median polish","text":"want plot focus residuals maximizing range colors fit range residual values, set col.eff = FALSE.  Note setting col.eff FALSE prevent effects cells colored. simply ensures range colors maximized match full range residual values. effect value falls within residual range assigned color.","code":"plot(M1, col.eff = FALSE)"},{"path":"https://mgimond.github.io/tukeyedar/articles/polish.html","id":"changing-color-schemes","dir":"Articles","previous_headings":"Adjusting color schemes","what":"Changing color schemes","title":"Median polish","text":"default, color scheme symmetrical (divergent) centered 0. adopts R’s (version 4.1 ) built-\"RdYlBu\" color palette. can assign different built-color palettes via colpal parameter. can list available colors R via hcl.pals() function. want limit output divergent color palettes, type: example, can assign \"Green-Brown\" color palette follows. (’ll remove common effect value range input values maximize displayed set colors).  default color scheme symmetrical linear, centered 0. want maximize use colors, regardless range values, can set col.quant TRUE adopt quantile color scheme.  ’ll note regardless asymmetrical distribution values 0, cell assigned unique color swatch. adopting quantile color classification scheme, might want adopt color palette generates fewer unique hues variation lightness values. example,","code":"hcl.pals(type = \"diverging\")    [1] \"Blue-Red\"      \"Blue-Red 2\"    \"Blue-Red 3\"    \"Red-Green\"        [5] \"Purple-Green\"  \"Purple-Brown\"  \"Green-Brown\"   \"Blue-Yellow 2\"    [9] \"Blue-Yellow 3\" \"Green-Orange\"  \"Cyan-Magenta\"  \"Tropic\"          [13] \"Broc\"          \"Cork\"          \"Vik\"           \"Berlin\"          [17] \"Lisbon\"        \"Tofino\" plot(M1, colpal = \"Green-Brown\", col.com = FALSE) plot(M1, col.quant = TRUE) plot(M1, col.quant = TRUE, colpal = \"Green-Orange\")"},{"path":"https://mgimond.github.io/tukeyedar/articles/polish.html","id":"adjusting-text","dir":"Articles","previous_headings":"","what":"Adjusting text","title":"Median polish","text":"can omit labeled values output setting res.txt FALSE.  Likewise can omit axes labels setting label.txt FALSE. may prove useful applying median polish large grid file.  can adjust text size via res.size, row.size col.size parameters numeric values, row names, column names respectively. example, set sizes 60% default value, type:","code":"plot(M1, res.txt = FALSE) plot(M1, res.txt = FALSE, label.txt = FALSE) plot(M1, row.size = 0.6, col.size = 0.6 , res.size = 0.6)"},{"path":"https://mgimond.github.io/tukeyedar/articles/polish.html","id":"exploring-diagnostic-plots","dir":"Articles","previous_headings":"","what":"Exploring diagnostic plots","title":"Median polish","text":"plot method also generate plot residuals vs comparison values (CV), herein referred diagnostic plot.  bisquare robust line fitted data (light red line) along robust loess fit (dashed blue line). function also output line’s slope. slope can used help estimate transformation data, needed. generate plot, simply extract cv component M1 list. cv component dataframe stores residuals (first column) CV values (fourth column). first records dataframe shown : diagnostic plot helps identify interactions effects. interaction suspected, model longer simple additive model; model needs augmented interactive component form: \\[ y_{ij} = \\mu + \\alpha_{} + \\beta_{j} + kCV +\\epsilon_{ij} \\] \\(CV\\) = \\(\\alpha_{}\\beta_{j}/\\mu\\) \\(k\\) constant can estimated slope generated diagnostic plot. truly additive model one changes response variable one level another level remain constant. example, given bottom-left matrix initial response values, changes response variable level level b constant regardless row effect. example, going b level z elicits change response 6 - 3 = 3. observed change values b levels x y (4-1 5-2 respectively). three row levels, change expected values b –increase 3 units. Likewise, changes response values rows x y y z constant (1) across levels column effect. additive effect can observed interaction plot shown right. column effect plotted along x-axis, row effect mapped line segment. Original dataset (left). Interaction plot (right). Parallel lines indicate interaction effects. median polish generates following table diagnostic plot: Median polished data showing interaction effects ’ll note lack pattern (flat one) accompanying diagnostic plot. Now, let’s see happens interaction fact present two way table. Original dataset (left). Interaction plot (right). Note lines longer parallel one another interaction plot. Now let’s run median polish generate diagnostic plot. Median polished data showing interaction effects ’ll note upward trend residuals increasing comparison values. usually good indication interaction effects. Another telltale sign pattern observed residuals median polish plot low residuals high residuals opposing corners table. interaction observed, either include interaction term additive model, seek re-expression might help alleviate interaction effects. choose include interaction term model, coefficient \\(k\\) can extracted slope generated diagnostic plot. choose re-express data hopes removing interaction data, can try using power transformation equal \\(1 - slope\\) (slope derived diagnostic plot). infant mortality dataset used exercise suggest interaction effects diagnostic plot. Next, ’ll look another dataset may exhibit interaction effects.","code":"plot(M1, type = \"diagnostic\") $slope       cv    1.3688 head(M1$cv)         perc region.eff  edu.eff            cv   1 -3.15625     2.3000 -1.19375 -0.1316846523   2 -0.00625    -0.3500 -1.19375  0.0200389688   3  0.00625    -1.4625 -1.19375  0.0837342626   4  0.29375     0.3500 -1.19375 -0.0200389688   5 -4.83125    -0.3500  0.03125 -0.0005245803   6  1.11875     2.3000  0.03125  0.0034472422"},{"path":"https://mgimond.github.io/tukeyedar/articles/polish.html","id":"another-example-earnings-by-sex-for-2021","dir":"Articles","previous_headings":"Exploring diagnostic plots","what":"Another example: Earnings by sex for 2021","title":"Median polish","text":"dataset consists earnings sex levels educational attainment 2021 (src: US Census Bureau). Education levels defined follows: NoHS: Less High School Graduate HS: High School Graduate (Includes Equivalency) AD: College Associate’s Degree Grad: Bachelor’s Degree original table (prior running median polish), can viewed setting maxiter 0 call eda_pol. 2021 Average earnings US. Next, ’ll run median polish. Next, plot final table diagnostic plot.  ’s can glean output: Overall, median earnings $41,359 Variability earnings due different levels education attainment covers range $56,936 different sexes covers range $15,858. residuals quite large suggesting may much variability earnings may explained row column effects. residuals explain $15,780 variability data. diagnostic plot suggests strong interaction sex effect education effect. implies, example, differences earnings sexes depend level educational attainment. slope residuals CV values around 0.94. Given strong evidence interaction effects, need take one two actions: can either add comparison values (CV) row-plus-column model, can see re-expressing earnings values eliminates dependence effects.","code":"edu <- c(\"NoHS\", \"HS\", \"HS+2\", \"HS+4\", \"HS+6\") df1 <- data.frame(Education = factor(rep(edu,2), levels = edu),                   Sex = c(rep(\"Male\", 5), rep(\"Female\",5)),                   Earnings = c(31722, 40514, 49288, 73128,98840,20448,                                     26967, 33430, 50554, 67202)) eda_pol(df1, row = Education, col = Sex, val = Earnings , maxiter = 0) M2 <- eda_pol(df1, row = Education, col = Sex, val = Earnings , plot = FALSE) plot(M2, res.size = 0.8, row.size = 0.8, col.size = 0.8)  plot(M2, \"diagnostic\") $slope          cv    0.9410244"},{"path":"https://mgimond.github.io/tukeyedar/articles/polish.html","id":"adding-cv-to-the-row-plus-column-model","dir":"Articles","previous_headings":"Exploring diagnostic plots > Another example: Earnings by sex for 2021","what":"Adding CV to the row-plus-column model","title":"Median polish","text":"CV values computed stored median polish object. can extracted model via M2$cv component can visualized via plot function. following figure shows original residuals table (left) CV table (right). Median polish residuals (left) CV values (right). comparison value added model, need compute new set residuals. residuals can plotted setting add.cv TRUE specifying value k. Using slope estimate k get: CV values (left) new set residuals (right). two tables provide us parameters needed construct model. example, Female-NoHS earnings value can recreated table follows: \\[ Earnings_{Female-NoHS} = \\mu + Sex_{Female} + Education_{NoHS} + kCV_{Female-NoHS} + \\epsilon_{Female-NoHS} \\] : \\(CV_{Female-NoHS} = \\frac{(Sex_{Female})(Education_{NoHS})}{\\mu}\\) \\(k\\) constant can estimated diagnostic plot’s slope (0.94 example). gives us: \\[ Earnings_{Female-NoHS} = 41359 -7929 -15274 + (0.94)(2928.2) -460.5 \\]","code":"plot(M2, res.size = 0.8, row.size = 0.8, col.size = 0.8)  plot(M2, \"cv\", res.size = 0.8, row.size = 0.8, col.size = 0.8) plot(M2, \"cv\", res.size = 0.8, row.size = 0.8, col.size = 0.8) plot(M2, \"residuals\", add.cv=TRUE, k = 0.94,      res.size = 0.8, row.size = 0.8, col.size = 0.8)"},{"path":"https://mgimond.github.io/tukeyedar/articles/polish.html","id":"re-expressing-earnings","dir":"Articles","previous_headings":"Exploring diagnostic plots > Another example: Earnings by sex for 2021","what":"Re-expressing earnings","title":"Median polish","text":"’s possible earnings presented us scale best suited analysis. Subtracting slope value (derived diagnostic plot) value 1 offers suggested transformation may provide us scale measure best suited data. ’ll rerun median polish using power transformation 1 - 0.94 = 0.06. Next, plot final table diagnostic plot. Median polish output (left) CV values (right). power 0.06 may bit aggressive given ’ve gone positive relationship CV residual negative relationship two. Tweaking power parameter may recommended. can done via trial error, can done using technique described next.","code":"M3 <- eda_pol(df1, row = Education, col = Sex, val = Earnings ,                plot = FALSE, p = 0.06) plot(M3, res.size = 0.8, row.size = 0.8, col.size = 0.8)  plot(M3, \"diagnostic\")"},{"path":"https://mgimond.github.io/tukeyedar/articles/polish.html","id":"fine-tuning-a-re-expression","dir":"Articles","previous_headings":"Exploring diagnostic plots > Another example: Earnings by sex for 2021","what":"Fine tuning a re-expression","title":"Median polish","text":"Klawonn et al.2 propose method honing optimal power transformation finding one maximizes effect’s spreads vis--vis residuals. computing ratio interquartile range row column effects 80% quantile residual’s absolute values. following code chunk computes ratio different power transformations. Row (left) column (right) effect IQRs residuals ratio vs power. plot suggests power transformation 0.1. ’ll re-run median polish using power transformation.  slope much smaller loess fit suggests monotonically increasing decreasing relationship residuals CV values. Re-expressing value seems done good job stabilizing residuals across CV values. ’ll modify color scheme place emphasis effects opposed overall value.  ’s can glean output: earnings values best expressed power scale 0.1. Overall, median earnings (re-expressed form) $19. Variability earnings due different levels education attainment covers range $3 different sexes covers range $1. residuals much smaller relative effects earnings re-expressed. residuals explain close $0 variability data. Just variability can explained effects. Re-expressing values eliminates interaction effects.","code":"f1 <- function(x){   out <- eda_pol(df1, row = Education, col = Sex, val = Earnings,                  p = x, plot=FALSE, tukey = FALSE)   c(p=out$power, IQrow = out$IQ_row, IQcol = out$IQ_col) }  IQ <- t(sapply(0:25/10,  FUN = f1 )) # Apply transformations at 0.1 intervals  plot(IQrow ~ p, IQ, type=\"b\") grid() plot(IQcol ~ p, IQ, type=\"b\") grid() M4 <- eda_pol(df1, row = Education, col = Sex, val = Earnings,                plot = FALSE, p = 0.1) plot(M4, res.size = 0.8, row.size = 0.8, col.size = 0.8)  plot(M4, \"diagnostic\") plot(M4, col.com = FALSE,       res.size = 0.8, row.size = 0.8, col.size = 0.8)"},{"path":"https://mgimond.github.io/tukeyedar/articles/polish.html","id":"the-mean-polish","dir":"Articles","previous_headings":"","what":"The mean polish","title":"Median polish","text":"eda_pol function accepts statistical summary function. default, uses median. example, mean polish generated earnings dataset looks like :  Polishing data using mean requires single iteration reach stable output. mean suffers sensitivity non-symmetrical distributions outliers. , median polish robust summary statistic. said, running mean polish benefits: ’s great way represent effects generated two-way analysis variance (aka 2-way ANOVA). confirmed comparing row column effects traditional 2-way ANOVA technique shown : median polish, must concern interactions effects. interaction present, ANOVA inferential statistics using F-test can untrustworthy.  strong evidence interaction. slope 0.92 can used estimate power transformation via \\(1 - slope\\). close power transformation 0.1 ended adopting median polish exercise. Results mean polish (left) diagnositc plot (right). Re-expressing data nice job removing interaction effects much like performed median polish. suggests one run two-way ANOVA, re-expression strongly suggested.","code":"M5 <- eda_pol(df1, row = Education, col = Sex, val = Earnings ,                stat = mean, plot = FALSE) plot(M5, res.size = 0.8, row.size = 0.8, col.size = 0.8) model.tables(aov(Earnings ~ Sex + Education, df1))   Tables of effects       Sex    Sex   Female   Male     -9489   9489        Education    Education     NoHS     HS   HS+2   HS+4   HS+6    -23124 -15469  -7850  12632  33812 plot(M5, type = \"diagnostic\", res.size = 0.8, row.size = 0.8, col.size = 0.8) $slope          cv    0.9223166 M4b <- eda_pol(df1, row = Education, col = Sex, val = Earnings , stat = mean,                plot = FALSE, p = 0.1, maxiter = 1) plot(M4b, res.size = 0.8, row.size = 0.8, col.size = 0.8)  plot(M4b, \"diagnostic\")"},{"path":"https://mgimond.github.io/tukeyedar/articles/qq.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"The empirical QQ plot (and derived Tukey mean-difference plot)","text":"empirical quantile-quantile plot (QQ plot) probably one underused least appreciated plots univariate analysis. used compare two distributions across full range values. generalization boxplot limit comparison just median upper lower quartiles. fact, compares values matching value one batch corresponding quantile batch. sizes batch need . differ, larger batch interpolated smaller batch’s set quantiles. QQ plot help visualize differences distributions, can also model relationship batches. Note confused modeling relationship bivariate dataset latter pairs points observational units whereas QQ plot pairs values matching quantiles.","code":""},{"path":"https://mgimond.github.io/tukeyedar/articles/qq.html","id":"anatomy-of-the-eda_qq-plot","dir":"Articles","previous_headings":"","what":"Anatomy of the eda_qq plot","title":"The empirical QQ plot (and derived Tukey mean-difference plot)","text":"point represents matching quantiles batch. shaded region represent batch’s middle values ( 75% middle values default). dashed lines inside shaded boxes represent batch’s medians. upper right-hand text indicates power transformation applied batches (default power 1 original measurement scale). formula applied one batches, appear upper right-hand text. eda_qq also output suggested relationship y variable x variable console. bases batch’s interquartile values. output assigned new object, object store list following values: x value (interpolated needed), y value (interpolated needed), power parameter (p), formula applied x variable, formula applied y variable.","code":"#>  [1] \"Suggested offsets:y = x * 1.4573 + (0.9914)\""},{"path":[]},{"path":"https://mgimond.github.io/tukeyedar/articles/qq.html","id":"data-type","dir":"Articles","previous_headings":"An overview of some of the function arguments","what":"Data type","title":"The empirical QQ plot (and derived Tukey mean-difference plot)","text":"function accept dataframe column quantitative variable interest, column category measurement belongs . also accept two separate vector objects. example, pass two separate vector object, x y, type:  data dataframe, type:","code":"library(tukeyedar) set.seed(207) x <- rnorm(30) y <- rnorm(30) + 0.5 eda_qq(x, y) dat <- data.frame(val = c(x, y), cat = rep(c(\"x\", \"y\"), each = 30)) eda_qq(dat, val, cat)"},{"path":"https://mgimond.github.io/tukeyedar/articles/qq.html","id":"suppressing-the-plot","dir":"Articles","previous_headings":"An overview of some of the function arguments","what":"Suppressing the plot","title":"The empirical QQ plot (and derived Tukey mean-difference plot)","text":"can suppress plot x y values outputted list data dataframe. batches match size, output show interpolated values output batches match size. output also include power parameter applied batches well formula applied one batches (fx formula applied x variable fy formula applied y variable).","code":"Q <- eda_qq(x,y, plot = FALSE) #>  [1] \"Suggested offsets:y = x * 1.12 + (0.5619)\" Q #>  $data #>              x           y #>  1  -2.0207122 -2.10710669 #>  2  -1.6048333 -1.30465821 #>  3  -1.5620907 -1.17618932 #>  4  -1.5128732 -1.17253191 #>  5  -1.3126378 -0.86423268 #>  6  -1.1770882 -0.40162859 #>  7  -1.0871906 -0.37002087 #>  8  -0.9258832 -0.19629536 #>  9  -0.8896555 -0.07210822 #>  10 -0.6152073 -0.01829722 #>  11 -0.3140113  0.05826287 #>  12 -0.2996734  0.09105884 #>  13 -0.2954234  0.09371398 #>  14 -0.2199849  0.13698992 #>  15 -0.2108781  0.22318119 #>  16  0.1202060  0.43006689 #>  17  0.2608893  0.52597363 #>  18  0.2680445  0.72665767 #>  19  0.2910663  0.81351407 #>  20  0.4239690  1.00612388 #>  21  0.4262605  1.01831440 #>  22  0.4301416  1.06713353 #>  23  0.5176361  1.23708449 #>  24  0.6085180  1.24360530 #>  25  0.6880919  1.33232007 #>  26  0.6929772  1.43973056 #>  27  0.7640838  1.59125312 #>  28  0.9037644  1.64852115 #>  29  1.0124869  1.77464625 #>  30  1.0503544  1.93823390 #>   #>  $p #>  [1] 1 #>   #>  $fx #>  NULL #>   #>  $fy #>  NULL"},{"path":"https://mgimond.github.io/tukeyedar/articles/qq.html","id":"defining-the-grey-region","dir":"Articles","previous_headings":"An overview of some of the function arguments","what":"Defining the grey region","title":"The empirical QQ plot (and derived Tukey mean-difference plot)","text":"grey region highlights core batches. default, set 75%. boundaries can modified via inner argument. example, highlight mid 68% values, type:  can suppress plotting shaded region setting q = FALSE.","code":"eda_qq(x, y, inner = 0.68)"},{"path":"https://mgimond.github.io/tukeyedar/articles/qq.html","id":"applying-different-symbol-to-tail-end-points","dir":"Articles","previous_headings":"An overview of some of the function arguments","what":"Applying different symbol to tail-end points","title":"The empirical QQ plot (and derived Tukey mean-difference plot)","text":"grey region distracting, still wish distinguish identify inner core values tail-end values, can set tails = TRUE enable point symbol option, q = FALSE remove grey region.  default, tail-end points symbolized using open point symbol (opposed filled point symbol applied t inner core points). tail-end point symbol can modfied via tail.pch, tail.col andtail.fill arguments. example, change tail-end point symbol + symbol, type:  want greater emphasis placed inner core points, change symbol color. example:","code":"eda_qq(x, y, tails = TRUE, q = FALSE) eda_qq(x, y, tails = TRUE, q = FALSE, tail.pch = 3) eda_qq(x, y, tails = TRUE, q = FALSE, tail.pch = 3, p.fill = \"coral3\")"},{"path":"https://mgimond.github.io/tukeyedar/articles/qq.html","id":"applying-a-formula-to-one-of-the-batches","dir":"Articles","previous_headings":"An overview of some of the function arguments","what":"Applying a formula to one of the batches","title":"The empirical QQ plot (and derived Tukey mean-difference plot)","text":"can apply formula batch via fx argument x-variable fy argument y-variable. formula passed text string. example, add 0.5 x values, type:","code":"eda_qq(x, y, fx = \"x + 0.5\")"},{"path":"https://mgimond.github.io/tukeyedar/articles/qq.html","id":"quantile-type","dir":"Articles","previous_headings":"An overview of some of the function arguments","what":"Quantile type","title":"The empirical QQ plot (and derived Tukey mean-difference plot)","text":"many different quantile algorithms available R. see full list quantile types, refer quantile help page: ?quantile. default, eda_qq() adopts q.type = 5. general, choice quantiles really matter, especially large datasets. want adopt R’s default type, set q.type = 7.","code":""},{"path":"https://mgimond.github.io/tukeyedar/articles/qq.html","id":"point-symbols","dir":"Articles","previous_headings":"An overview of some of the function arguments","what":"Point symbols","title":"The empirical QQ plot (and derived Tukey mean-difference plot)","text":"default point type, color size applied points (just inner core points tails = TRUE) can modified via pch, p.col (/p.fill) size arguments. color can either built-color name (can see full list typing colors()) rgb() function. define color using one built-color names, can adjust transparency via alpha argument. alpha value 0 renders point completely transparent value 1 renders point completely opaque. point symbol can take two color parameters depending point type. pch number 21 25, p.fill define fill color p.col define border color. point symbol type, p.fill argument ignored. examples:","code":"eda_qq(x, y, p.fill = \"bisque\", p.col = \"red\", size = 1.2) eda_qq(x, y, pch = 16, p.col = \"tomato2\", size = 1.5, alpha = 0.5) eda_qq(x, y, pch = 3, p.col = \"tomato2\", size = 1.5)"},{"path":"https://mgimond.github.io/tukeyedar/articles/qq.html","id":"interpreting-a-qq-plot","dir":"Articles","previous_headings":"","what":"Interpreting a QQ plot","title":"The empirical QQ plot (and derived Tukey mean-difference plot)","text":"help interpret following QQ plots, ’ll compare plot matching kernel density plot.","code":""},{"path":"https://mgimond.github.io/tukeyedar/articles/qq.html","id":"identical-distributions","dir":"Articles","previous_headings":"Interpreting a QQ plot","what":"Identical distributions","title":"The empirical QQ plot (and derived Tukey mean-difference plot)","text":"first example, generate QQ plot two identical distributions.  two distributions identical, points line along `\\(x=y\\) line shown . also generate overlapping density plots seen right plot.","code":"library(tukeyedar) set.seed(543) x <- rnorm(100) y <- x eda_qq(x, y) eda_dens(x, y)"},{"path":"https://mgimond.github.io/tukeyedar/articles/qq.html","id":"additive-offset","dir":"Articles","previous_headings":"Interpreting a QQ plot","what":"Additive offset","title":"The empirical QQ plot (and derived Tukey mean-difference plot)","text":"work batches, time offset second batch, y, 2. case referred additive offset.  ’ll note points parallel \\(x=y\\) line. indicates distributions exact shape. , fall \\(x=y\\) line–offset +2 units measured along y-axis, expected. can confirm adding 2 x batch:  points now overlap \\(x=y\\) line perfectly. density distribution overlap exactly well.","code":"library(tukeyedar) set.seed(543) x <- rnorm(100) y <- x + 2 eda_qq(x, y) eda_dens(x, y) eda_qq(x, y, fx = \"x + 2\") eda_dens(x, y, fx = \"x + 2\")"},{"path":"https://mgimond.github.io/tukeyedar/articles/qq.html","id":"multiplicative-offset","dir":"Articles","previous_headings":"Interpreting a QQ plot","what":"Multiplicative offset","title":"The empirical QQ plot (and derived Tukey mean-difference plot)","text":"Next, explore two batches share central value second batch 0.5 times first. case referred multiplicative offset.  , series points angle \\(x=y\\) line yet, ’ll note points follow perfectly straight line. suggests multiplicative offset change location. indicates “shape” batches similar, one “wider” . , y half wide x. can also state x twice wide y know multiplicative offset since synthetically generated values x y. practice eyeballing multiplier plot straightforward. can use suggested offset 0.5 displayed console help guide us. can also use angle points \\(x=y\\) line judge direction take choosing multiplier. points make angle less \\(x=y\\) line, want choose x multiplier less 1. angle greater \\(x=y\\) line, want choose multiplier greater 1. , know multiplier 0.5. Let’s confirm following code chunk:","code":"y <- x * 0.5 eda_qq(x, y) eda_dens(x, y) eda_qq(x, y, fx = \"x * 0.5\") eda_dens(x, y, fx = \"x * 0.5\")"},{"path":"https://mgimond.github.io/tukeyedar/articles/qq.html","id":"both-additive-and-multiplicative-offset","dir":"Articles","previous_headings":"Interpreting a QQ plot","what":"Both additive and multiplicative offset","title":"The empirical QQ plot (and derived Tukey mean-difference plot)","text":"next example, add multiplicative additive offset data.  now see multiplicative offset (points form angle \\(x=y\\) line) additive offset (points intersect \\(x=y\\) line). suggests width batches differ values offset constant value across full range values. ’s usually best first identify multiplicative offset points rendered parallel \\(x=y\\) line. multiplier identified, can identify additive offset.  surprise, multiplier 0.5 renders series points parallel \\(x=y\\) line. can now eyeball offset +2 measuring distance points \\(x=y\\) line measured along y-axis.  can model relationship y x \\(y = x * 0.5 + 2\\).","code":"y <- x * 0.5 + 2 eda_qq(x, y) eda_dens(x, y) eda_qq(x, y, fx = \"x * 0.5\") eda_dens(x, y, fx = \"x * 0.5\") eda_qq(x, y, fx = \"x * 0.5 + 2\") eda_dens(x, y, fx = \"x * 0.5 + 2\")"},{"path":"https://mgimond.github.io/tukeyedar/articles/qq.html","id":"batches-need-not-be-symmetrical","dir":"Articles","previous_headings":"Interpreting a QQ plot","what":"Batches need not be symmetrical","title":"The empirical QQ plot (and derived Tukey mean-difference plot)","text":"far, worked normally distributed dataset. note distribution can used QQ plot. example, two equally skewed distributions differ central values generate points perfectly lined .  Since distributions identical shape, points follow straight line regardless nature shape (skewed, unimodal, bimodal, etc…). distributions symmetrical, careful letting long tails distribution bias interpretation plots given tail-end values take disproportionately larger portion plot. Tail-end values tend noisy undoubtedly generate QQ plot may suggest distributions inherently dissimilar. example, generate plain vanilla plot (.e. one without built-inner core guides) two batches pulled identical theoretical distribution, get following QQ plot.  Note tail-end values deviate \\(x=y\\) line. take nearly third plot leading one place disproportionate emphasis values. Adding grey regions median value lines helps us identify bulk data (inner 75% default).","code":"set.seed(540) x2 <- rbeta(100, 1, 8) y2 <- x2 + 0.2  eda_qq(x2, y2) eda_dens(x2, y2) set.seed(18) x2 <- rbeta(100, 1, 8) y2 <- rbeta(100, 1, 8) eda_qq(x2, y2, q = FALSE, med = FALSE) set.seed(18) x2 <- rbeta(100, 1, 8) y2 <- rbeta(100, 1, 8) eda_qq(x2, y2)"},{"path":"https://mgimond.github.io/tukeyedar/articles/qq.html","id":"power-transformation","dir":"Articles","previous_headings":"","what":"Power transformation","title":"The empirical QQ plot (and derived Tukey mean-difference plot)","text":"eda_qq function allows apply power transformation batches. Note transforming just one batch makes little sense since end comparing two batches measured different scale. example, make use R’s Indometh dataset compare indometacin plasma concentrations two test subjects.  QQ plot’s shaded regions shifted towards lower values. shaded regions show mid 75% values batch. regions shifted towards lower values higher values, suggests skewed data. Another telltale sign skewed dataset gradual dispersion points two diagonal directions. , go relatively high density points near lower values lower density points near higher values. preclude us identifying multiplicative/additive offsets, many statistical procedures benefit symmetrical distribution. Given values measures concentration, might want adopt log transformation. power transformation defined p argument (power parameter value 0 defines log transformation).  seems decent job symmetrizing distributions. Note suggested offset displayed console applies transformed dataset. can verify applying offset x batch.  can characterize differences indometacin plasma concentrations subject 1 subject 2 \\(log(conc)_{s2} = log(conc)_{s1} * 0.8501 + 0.3902\\)","code":"s1 <- subset(Indometh, Subject == 1, select = conc, drop = TRUE) # Test subject 1 s2 <- subset(Indometh, Subject == 2, select = conc, drop = TRUE) # Test subject 2 eda_qq(s1, s2) eda_qq(s1, s2, p = 0) #>  [1] \"Suggested offsets:y = x * 0.8508 + (0.3914)\" eda_qq(s1, s2, p = 0, fx = \"x * 0.8501 + 0.3902\")"},{"path":"https://mgimond.github.io/tukeyedar/articles/qq.html","id":"the-tukey-mean-difference-plot","dir":"Articles","previous_headings":"","what":"The Tukey mean-difference plot","title":"The empirical QQ plot (and derived Tukey mean-difference plot)","text":"Tukey mean-difference plot simply extension QQ plot whereby plot rotated \\(x=y\\) line becomes horizontal. can useful helping identify subtle differences point pattern line. plot rotated 45° mapping difference batches y-axis, mapping mean batches x-axis. example, following figure left (QQ plot) shows additive offset batches fails clearly identify multiplicative offset. latter can clearly seen Tukey mean-difference plot (right) invoked setting argument md = TRUE.  Note mean-difference plot highlights mid difference values defined inner argument. clearly reflect mid values shown QQ plot. want mean-difference plot show inner core values, set tails TRUE. , might want disable shaded region emphasis placed points.","code":"set.seed(321) x <- rnorm(10) y <- x * 0.97 + 0.3 eda_qq(x, y, title = \"QQ plot\") eda_qq(x, y, md = TRUE, title = \"M-D plot\") eda_qq(x, y, md = TRUE, tails = TRUE, q = FALSE)"},{"path":"https://mgimond.github.io/tukeyedar/articles/qq.html","id":"creating-a-qq-plot-matrix","dir":"Articles","previous_headings":"","what":"Creating a QQ plot matrix","title":"The empirical QQ plot (and derived Tukey mean-difference plot)","text":"separate function, eda_qqmat, used create QQ plot matrix. adopts many arguments available eda_qq function, adopt eda_qq’s default settings. example, inner region shading parameter q set FALSE–minimize clutter densely packed matrix. Instead, points Falling outside inner region symbolized open point symbol. example, generate empirical QQ plot matrix singer height values conditioned voice parts type:  can, course, adopt point symbol points setting tails = FALSE. matrix limits output lower triangle given matrix symmetrical. wish add upper triangle, set upper = TRUE. Additive offsets can distracting goal compare spreads across group. function offers option generate residuals QQ plot matrix (resid = TRUE) subtracting input values group mean (stat = mean) median (stat = median). example, generate residuals QQ plot singer height, type:","code":"singer <- lattice::singer eda_qqmat(singer, height, voice.part) eda_qqmat(singer, height, voice.part, resid = TRUE)"},{"path":"https://mgimond.github.io/tukeyedar/articles/qq.html","id":"a-working-example","dir":"Articles","previous_headings":"","what":"A working example","title":"The empirical QQ plot (and derived Tukey mean-difference plot)","text":"Many datasets distributions differ additively /multiplicatively, also general shape. may create complex point patterns QQ plot. cases can indicative different processes play different ranges values. ’ll explore case using wat95 wat05 datasets available package. data represent derived normal temperatures 1981-2010 period (wat95) 1991-2020 period (wat05) city Waterville, Maine (USA). subset data daily average normals, avg: now compare distributions. ’ll omit shaded region now.  first glance, batches seem differ. close points \\(x=y\\) line? rotate plot zoom \\(x=y\\) line setting md = TRUE.  view proving far insightful. Note data, overall offset 0.5 suggesting new normals 0.5°F. warmer. stop , pattern observed Tukey mean-difference plot far random. fact, can break pattern three distinct ones around 35°F 50°F. categorize groups low, mid high values. next chunk code generate three separate QQ plots range values.  suggested offsets displayed console group. important note splitting paired values generated earlier eda_qq function ($avg) values original datasets (old new). split original data prior combining eda_qq, generated different patterns QQ Tukey plots. approach generate different quantile pairs. Next, ’ll adopt suggested offsets generated console.  proposed offsets seem good job characterizing differences temperatures. characterization differences normal temperatures old new set normals can formalized follows: \\[ new = \\begin{cases} old * 0.9506 + 1.661, &  T_{avg} < 35 \\\\ old * 1.0469 - 1.6469, & 35 \\le T_{avg} < 50  \\\\ old * 0.9938 + 0.9268, & T_{avg} \\ge 50 \\end{cases} \\] key takeaways analysis can summarized follows: Overall, new normals 0.5°F warmer. offset uniform across full range temperature values. lower temperature (less 35°F), new normals slightly narrower distribution 1.7°F warmer. mid temperature values (35°F 50°F) new normals slightly wider distribution overall 1.6°F cooler. higher range temperature values (greater 50°F), new normals slightly narrower distribution 0.9°F warmer.","code":"old <- wat95$avg # legacy temperature normals new <- wat05$avg # current temperature normals Q <- eda_qq(old, new, q = FALSE) Q <- eda_qq(old, new, md = TRUE) labs <- c(\"low\", \"mid\", \"high\") out <- Q$data out$avg <- (out$old + out$new) / 2 out2 <- split(out, cut(out$avg, c(min(out$avg), 35, 50, max(out$avg)),                         labels = labs, include.lowest = TRUE)) sapply(labs, FUN = \\(x) {eda_qq(out2[[x]]$old, out2[[x]]$new ,                                 xlab = \"old\", ylab = \"new\", md = T)                          title(x, line = 3, col.main = \"orange\")} ) #>  [1] \"Suggested offsets:y = x * 0.9507 + (1.6599)\" #>  [1] \"Suggested offsets:y = x * 1.047 + (-1.6502)\" #>  [1] \"Suggested offsets:y = x * 0.9938 + (0.9268)\" xform <- c(\"x * 0.9506 + 1.661\",            \"x * 1.0469 - 1.6469\",            \"x * 0.9938 + 0.9268\") names(xform) <- labs sapply(labs, FUN = \\(x) {eda_qq(out2[[x]]$old, out2[[x]]$new,                                  fx = xform[x],                                 xlab = \"old\", ylab = \"new\", md = T)                          title(x, line = 3, col.main = \"coral3\")} )"},{"path":"https://mgimond.github.io/tukeyedar/articles/rfs.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"The residual-fit spread plot","text":"residual-fit spread plot (rfs plot) plot first introduced William Cleveland designed compare variability explained fitted model (group means univariate analysis linear model bivariate analysis) variability remaining residuals. ’s constructed follows: model fitted data. can fitted mean values multiple groups univariate analysis, fitted regression line bivariate analysis. residuals computed subtracting fitted values original values. estimated values model centered zero subtracting, example, mean fitted values. Side--side quantile plots generated sets values. , important assumption creating rfs plot shared shape residual distribution across groups ranges independent variable. Let’s start simple batch values, \\(y\\). Figure 1. batch 60 values mean value represented red point. points jittered x-axis help visualize distribution. overarching objective data analysis reduce data summary best characterizes set values. example, can use batch’s mean value 11.03 (red point figure 1) estimate typical value \\(y\\). good first approximation expect “typical” value \\(y\\). , values \\(y\\) exactly equal 11.03. variability around estimate. variability ranges 9 13 overall range 4 \\(y\\) units. variability fitted mean value often characterized residuals–difference actual value fitted value. want improve estimation value \\(y\\) (.e. reduce uncertainty estimation \\(y\\)), may want add grouping variable dataset. essence, adding another handle data hopes chipping away variability accompanies estimate. Figure 2 shows groups value \\(y\\) belongs . Figure 2. batch values split across three groups group’s mean displayed orange point. Knowing group observation belongs can generate one three completely different estimates \\(y\\) range 10 12 units. reduces uncertainty estimation \\(y\\) 2 units, improvement earlier model generated just one estimate observations. range residual values fitted mean seems also diminished. Ideally, want variability surrounding fitted means small possible relative range fitted means. However, jitter plot Figure 2 effective comparing three spreads. better plot one limits emphasis comparison spreads fitted values residuals. plot away absolute values fitted means residuals, instead, centers spreads around \\(0\\). Another characteristic ideal plot help quantify relative difference spreads fitted values residuals. good candidate plot side--side quantile plot fitted values centered (roughly) around zero left residual values centered respective group fitted values. gives us rfs plot shown Figure 3. Figure 3. residual-fit spread plot. observation split quantile plot fitted value minus group mean (left plot) quantile plot residuals (right plot). x-axis displays fraction values (f-value) plot matching value y-axis. looks three horizontal lines left plot Figure 3 simply overlapping points–one point observation. Since observation \\(y\\) falls one three groups (, b c), many values \\(y\\) share fitted (mean) value. example, last observation original dataset value 11.05 part group c. value can decomposed group mean 11.98 residual -0.93 follows: \\[ 11.05 = 11.98 - 0.93 \\] value shown green point Figure 4. Note overall mean 11.03 removed fitted value 11.98 giving us rescaled fitted value 0.95. process applied observations resulting number points quantile plots total number observations original dataset.  rfs plot facilitates comparison spreads sharing y axis spreads centered 0. working example, spreads identical suggesting grouping variable \\(groups\\) can help explain variability data. help develop intuitive feel interpretation rfs plot, can explore two extreme scenarios. next scenario, assign groups values \\(y\\) way maximize separation group (see Figure 5). Figure 5. example dataset exhibits clear separation grouped values y. Figure 6 shows matching rfs plot. , spread fitted values greater spread residuals defined minimum maximum values. ignore extreme values focus solely inner 90% residuals, see variability reduced just 1 unit \\(y\\) half spread defined fitted values. Figure 6. spread fitted mean values spans 2 units along y-axis. residuals span 1 unit ignoring extreme values suggesting grouping variable good job improving estimation y. next example, look extreme: one spread fitted means small relative variability surrounding fitted value. original \\(y\\) batch values used re-assigning grouping variables way minimize importance grouping variable estimating \\(y\\) (See Figure 7). Figure 7. example dataset exhibit clear separation grouped values y. matching rfs plot shown Figure 8. Figure 8. spread fitted mean values spans just 1/3 unit residuals span 3 units ignoring extreme values suggesting grouping variable improve estimation y. last dataset, spread residuals quite important relative spread fitted values. suggests grouping variable improve estimation \\(y\\). effect estimating \\(y\\) small. words, away grouping variable used overall mean value estimate \\(y\\), spread residuals nearly identical.","code":""},{"path":"https://mgimond.github.io/tukeyedar/articles/rfs.html","id":"generating-an-rfs-plot-with-eda_rfs","dir":"Articles","previous_headings":"Introduction","what":"Generating an rfs plot with eda_rfs","title":"The residual-fit spread plot","text":"first dataset offered introduction can recreated follows: generate rfs plot, type: Figure 9. rfs plot generated using eda_rfs() function. addition generating plot, function also output information spreads console. extracts range values associated mid 90% residuals. plot console output indicate mid 90% residuals cover range 1.6 units, roughly. 15% less spread covered estimates. reason mid 90% values chosen prevent outliers extreme values residuals disproportionately exaggerating spread residuals. example, ’ll note extreme outlier little 1.5 units clearly representative bulk residuals. shaded region highlighting inner 90% residuals can added plot setting q = TRUE. Figure 10. rfs plot generated using eda_rfs() function inner 90% region displayed shaded region residuals quantile plot. horizontal grey region shows matching values y-axis. can change constitutes mid portion residuals assigning fraction ranging 0 1 inner argument. example, 95% inner residual spread compared spread fitted values, set inner = 0.95 shown following example. Figure 11. rfs plot generated using eda_rfs() function inner 95% region displayed grey vertical region Residuals quantile plot. horizontal grey region shows matching values y-axis. Adding grouping variable improves estimation \\(y\\) reducing uncertainty around estimate. split data groups stuck one overall mean value, ended larger residual spread shown Figure 12. Figure 12. rfs plot data presented us data values split groups. single fitted estimate overall mean. code, added new column unique grouping value, \"\", shared across \\(y\\) values. results single “group” rfs spread plot. 90% inner residual spread covers range 2.76 units–quite bit spread residuals observed added grouping variable mix.","code":"set.seed(9591) df <- data.frame(y = rnorm(60, mean = c(10,11, 12), sd = 0.5),                   groups = rep(c(\"a\",\"b\",\"c\"), times = 20)) library(tukeyedar)  eda_rfs(df, y, groups) #>  The mid 90.0% of residuals covers about 1.62 units. #>  The fitted values cover a range of 1.87 units, or about 115.4% of the mid 90.0% of residuals. eda_rfs(df, y, groups, q = TRUE) eda_rfs(df, y, groups, q = TRUE, inner = 0.95) #>  The mid 95.0% of residuals covers about 1.92 units. #>  The fitted values cover a range of 1.87 units, or about 97.3% of the mid 95.0% of residuals. #>  The mid 90.0% of residuals covers about 2.76 units. #>  The fitted values cover a range of 0.00 units, or about 0.0% of the mid 90.0% of residuals."},{"path":"https://mgimond.github.io/tukeyedar/articles/rfs.html","id":"eda_rfs-options","dir":"Articles","previous_headings":"Introduction","what":"eda_rfs() options","title":"The residual-fit spread plot","text":"’ve already introduced q inner arguments allows set visualize inner range residual spread rfs plot console. Another eda_rfs option modifies summary statistic used univariate data. default, function computes mean value group data. Instead, can software compute median setting stat = median. can useful option working skewed datasets. example, \\(hp\\) variable built-\\(mtcars\\) dataset right skew. higher values disproportionate influence mean value shown Figure 13. Figure 13. rfs plot horsepower values mtcars dataset conditioned transmission type (variable dataset). , mean statistic (default) used compute central values. Adopting median minimize influence extreme \\(hp\\) values fitting central values \\(\\) group shown Figure 14. Figure 14. rfs plot horsepower values mtcars dataset conditioned transmission type (variable dataset). , optional median statistic used compute central values. ’s important remember use rfs plot makes sense residuals across groups share distribution. common assumption many popular parametric statistical procedures. skew concern univariate dataset, function allows transformation variable. example, render hp dataset symmetrical, can apply log transformation via argument p = 0 shown Figure 15. Figure 15. rfs plot log transformed horsepower values mtcars dataset conditioned transmission type (variable dataset). Results reported transformed variable units. power transformation used data displayed upper right-hand side residual quantile plot. hide parameter plot, set show.par = FALSE. stacked bar plot can added plot highlight relative spreads fitted values residuals. Note residual spread defined inner argument. enable bar plot, set bar TRUE. Figure 15. rfs plot log transformed horsepower values mtcars dataset conditioned transmission type (variable dataset). Results reported transformed variable units. red bar relative spread residuals green bar relative spread fitted values. stacked bar plot can helpful quickly gauging effect fitted values explaining variability data. longer green bar relative red bar, greater fitted value’s effect minimizing uncertainty estimated value.","code":"eda_rfs(mtcars, hp, am, q = TRUE) #>  The mid 90.0% of residuals covers about 177.90 units. #>  The fitted values cover a range of 33.42 units, or about 18.8% of the mid 90.0% of residuals. eda_rfs(mtcars, hp, am, stat = median, q = TRUE) #>  The mid 90.0% of residuals covers about 187.15 units. #>  The fitted values cover a range of 66.00 units, or about 35.3% of the mid 90.0% of residuals. eda_rfs(mtcars, hp, am,  q = TRUE, p = 0) #>  The mid 90.0% of residuals covers about 1.28 units. #>  The fitted values cover a range of 0.33 units, or about 25.7% of the mid 90.0% of residuals. eda_rfs(mtcars, hp, cyl,  bar = TRUE) #>  The mid 90.0% of residuals covers about 99.11 units. #>  The fitted values cover a range of 126.58 units, or about 127.7% of the mid 90.0% of residuals."},{"path":"https://mgimond.github.io/tukeyedar/articles/rfs.html","id":"rfs-plots-for-bivariate-analysis","dir":"Articles","previous_headings":"Introduction","what":"Rfs plots for bivariate analysis","title":"The residual-fit spread plot","text":"rfs plot can used bivariate data evaluate effect fitted model regression line may explaining variability data. case univariate analysis, seeking estimate variable \\(y\\) way minimize uncertainty surrounding estimate. example, want estimate miles-per-gallon consumed vehicle mtcars built-dataset, start simplest estimate–mean. Figure 16. jitter plot 32 miles-per-gallon measurements mtcars dataset. mean value fitted data giving us first estimate variable. , expected, variability covers range 24 miles-per-gallon. can improve estimate adding another handle data. , instead adding categorical variable proposed first example tutorial, can add another continuous variable help us improve estimate. example, can see vehicle’s horsepower can help us home precise estimate miles-per-gallon. Figure 17 gives us scatter plot miles-per-gallon vs horsepower. Figure 17. scatter plot miles-per gallon (mpg) vs. horsepower (hp). pattern scatter plot suggests mpg decreases function increasing hp. split data sub-groups hp values compute separate means done univariate example , fit linear model data whereby fitted line provide us unique estimate mpg unique value hp. common model fitting strategy least-squares regression technique (see Figure 18). Figure 18. scatter plot miles-per-gallon (mpg) vs. horsepower (hp) fitted linear model. vertical grey dashed lines highlight error estimated values. estimate mpg conditioned value hp. estimate (extracted red line plot) ranges 7 miles-per-gallon 26 miles-per-gallon. residuals highlighted vertical dashed lines Figure 18. rfs plot can help us assess much variability mpg can explained newly fitted model compares residuals (Figure 19). Figure 19. rfs plot bivariate model whereby fitted values plotted left quantile plot residuals plotted right quantile plot. fit-minus-mean plot looks different univariate rfs plot, interpretation . point left quantile plot estimated mpg value (minus overall mean) fitted linear model. points residuals quantile plot represent deviation, error, estimated value observation. example, estimated mpg value largest hp value 335 7.24 residual +7.75 hp units.  can see spread fitted model residuals comparable fitted model explaining bit variability data adopting much simpler mean model Figure 16.","code":""},{"path":"https://mgimond.github.io/tukeyedar/articles/rfs.html","id":"using-eda_rfs-with-a-regression-model","dir":"Articles","previous_headings":"Introduction > Rfs plots for bivariate analysis","what":"Using eda_rfs() with a regression model","title":"The residual-fit spread plot","text":"must first create model using either built-lm() function package’s eda_lm eda_rline functions. example, evaluate effect linear model estimating miles per gallon (mpg) vehicle’s horsepower (hp), first define model, pass model eda_rfs function. , ’ll use package’s eda_lm function. Figure 21. scatter plot miles-per-gallon vs horsepower built-mtcars dataset. linear model fitted data. resulting rfs plot shown Figure 22. Figure 22. scatter plot miles-per-gallon vs horsepower built-mtcars dataset. linear model fitted data.","code":"M1 <- eda_lm(mtcars, hp, mpg) eda_rfs(M1, q = TRUE) #>  The mid 90.0% of residuals covers about 12.79 units. #>  The fitted values cover a range of 19.31 units, or about 150.9% of the mid 90.0% of residuals."},{"path":"https://mgimond.github.io/tukeyedar/articles/rfs.html","id":"reference","dir":"Articles","previous_headings":"Introduction","what":"Reference","title":"The residual-fit spread plot","text":"Cleveland, William S. (1993) Visualizing Data. Hobart Press.","code":""},{"path":"https://mgimond.github.io/tukeyedar/articles/RLine.html","id":"the-resistant-line-basics","dir":"Articles","previous_headings":"","what":"The resistant line basics","title":"Resistant Line","text":"eda_rline function fits robust line bivariate dataset. first breaking data three roughly equal sized batches following x-axis variable. uses batches’ median values compute slope intercept. However, function doesn’t stop . fitting inital line, function fits another line (following aforementioned methodology) model’s residuals. slope close zero, residual slope added original fitted model creating updated model. iteration repeated residual slope close zero residual slope changes sign (point average last two iterated slopes used final fit). example iteration follows using data Velleman et. al’s book. dataset, neoplasms, consists breast cancer mortality rates regions varying mean annual temperatures.  three batches divided follows:  Note 16 record dataset divisible three thus forcing extra point middle batch (remainder division three two, extra point added tail-end batches). Next, compute medians batch (highlighted red points following figure).  two end medians used compute slope : \\[ b = \\frac{y_r - y_l}{x_r-x_l} \\] subscripts \\(r\\) \\(l\\) reference median values right-left-batches. slope computed, intercept can computed follows: \\[ median(y_{l,m,r} - b * x_{l,m,r}) \\] \\((x,y)_{l,m,r}\\) median x y values batch. line used compute first set residuals. line fitted residuals following procedure outlined .  initial model slope intercept 3.412 -69.877 respectively residual’s slope intercept -0.873 41.451 respectively. residual slope added first computed slope process repeated thus generating following tweaked slope updated residuals:  updated slope now 3.412 + (-0.873) = 2.539. iteration continues slope residuals stabilize. final line working example ,  final slope intercept 2.89 -46.2, respectively.","code":"#>  NULL"},{"path":"https://mgimond.github.io/tukeyedar/articles/RLine.html","id":"implementing-the-resistant-line","dir":"Articles","previous_headings":"","what":"Implementing the resistant line","title":"Resistant Line","text":"eda_rline takes just three arguments: data frame, x variable y variable. function output list. elements b model’s intercept slope. vectors x y input values sorted x. res vector final residuals sorted x. xmed ymed vectors medians three batches. px py power transformations applied variables. output list class eda_rline. plot method available class.  see resistant line compares ordinary least-squares (OLS) regression slope, add output lm model plot via abline():  regression model computes slope 2.36 whereas resistant line function generates slope 2.89. scatter plot, can spot point may undo influence regression line (point highlighted green following plot).  Removing point data generates OLS regression line inline resistant model. point interest 15th record neoplasms data frame.  Note OLS slope inline generated resistant line. ’ll also note resistant line slope also changed. Despite resistant nature line, removal point changed makeup first tier values (note leftward shift vertical dashed line). changed makeup batch thus changing median values first second tier batches.","code":"library(tukeyedar) M <- eda_rline(neoplasms, Temp, Mortality) M #>  $b #>  [1] 2.890173 #>   #>  $a #>  [1] -46.20241 #>   #>  $residuals #>   [1]  21.59489403   0.43651252  -1.88256262   9.12610790 -10.95192678 #>   [6]  -7.32013487   0.15674374   5.05558767  -8.71262042  -1.90279383 #>  [11]   3.05211946  -6.97100193  -0.09412331   6.48275530   2.09373796 #>  [16]   0.43651252 #>   #>  $x #>   [1] 31.8 34.0 40.2 42.1 42.3 43.5 44.2 45.1 46.3 47.3 47.8 48.5 49.2 49.9 50.0 #>  [16] 51.3 #>   #>  $y #>   [1]  67.3  52.5  68.1  84.6  65.1  72.2  81.7  89.2  78.9  88.6  95.0  87.0 #>  [13]  95.9 104.5 100.4 102.5 #>   #>  $xmed #>  [1] 40.2 45.7 49.9 #>   #>  $ymed #>  [1]  67.30  85.15 100.40 #>   #>  $index #>  [1]  5 11 16 #>   #>  $xlab #>  [1] \"Temp\" #>   #>  $ylab #>  [1] \"Mortality\" #>   #>  $px #>  [1] 1 #>   #>  $py #>  [1] 1 #>   #>  $iter #>  [1] 4 #>   #>  $fitted.values #>   [1]  45.70511  52.06349  69.98256  75.47389  76.05193  79.52013  81.54326 #>   [8]  84.14441  87.61262  90.50279  91.94788  93.97100  95.99412  98.01724 #>  [15]  98.30626 102.06349 #>   #>  attr(,\"class\") #>  [1] \"eda_rline\" plot(M) abline(lm(Mortality ~ Temp, neoplasms), lty = 2) points(neoplasms[15,], col=\"#43CD80\",cex=1.5 ,pch=20) neoplasms.sub <- neoplasms[-15,] M.sub <- eda_rline(neoplasms.sub, Temp, Mortality) plot(M.sub) abline(lm(Mortality ~ Temp, neoplasms.sub), lty = 2) # Regression model with data subset"},{"path":[]},{"path":"https://mgimond.github.io/tukeyedar/articles/RLine.html","id":"nine-point-data","dir":"Articles","previous_headings":"Other examples","what":"Nine point data","title":"Resistant Line","text":"nine_point dataset used Hoaglin et. al (p. 139) test resistant line function’s ability stabilize wild oscillations computed slopes across iterations.  , slope intercept 0.067 0.133 respectively matching 1/15 2/15 values computed Hoaglin et. al.","code":"M <- eda_rline(nine_point, X,Y) plot(M)"},{"path":"https://mgimond.github.io/tukeyedar/articles/RLine.html","id":"age-vs--height-data","dir":"Articles","previous_headings":"Other examples","what":"Age vs. height data","title":"Resistant Line","text":"age_height another dataset found Hoaglin et. al (p. 135). gives ages heights children private urban school.  , slope intercept 0.429 91.221 respectively matching 0.426 slope closely matching 90.366 intercept values computed Hoaglin et. al page 137.","code":"M <- eda_rline(age_height, Months,Height) plot(M)"},{"path":"https://mgimond.github.io/tukeyedar/articles/RLine.html","id":"not-all-relationships-are-linear","dir":"Articles","previous_headings":"","what":"Not all relationships are linear!","title":"Resistant Line","text":"’s important remember resistant line technique valid bivariate relationship linear. , ’ll step example highlighted Velleman et. al (p. 138) using R built-mtcars dataset. First, ’ll fit resistant line data.  ’s important note just resistant line can fit necessarily imply relationship linear. assess linearity mtcars dataset, ’ll make use eda_3pt function.  ’s clear two half slopes relationship linear. Velleman et. al first suggest re-expressing mpg 1/mpg (.e. applying power transformation -1) giving us number gallons consumed per mile driven.  two half slopes still differ. therefore opt re-express disp variable. One possibility take inverse 1/3 since displacement measure volume (e.g. length3) gives us:  Now identified re-expressions linearises relationship, can fit resistant line. (Note grey line generated eda_3pt function resistant line generated eda_rline.)","code":"M <- eda_rline(mtcars, disp, mpg) plot(M) eda_3pt(mtcars, disp, mpg) eda_3pt(mtcars, disp, mpg, py = -1, ylab = \"gal/mi\") eda_3pt(mtcars, disp, mpg,  px = -1/3, py = -1,         ylab = \"gal/mi\", xlab = expression(\"Displacement\"^{-1/3})) M <- eda_rline(mtcars, disp, mpg,  px = -1/3, py = -1) plot(M, ylab = \"gal/mi\", xlab = expression(\"Displacement\"^{-1/3}))"},{"path":"https://mgimond.github.io/tukeyedar/articles/RLine.html","id":"computing-a-confidence-interval","dir":"Articles","previous_headings":"","what":"Computing a confidence interval","title":"Resistant Line","text":"Confidence intervals coefficients can estimated using bootstrapping techniques. two approaches: resampling residuals resampling x-y cases.","code":""},{"path":"https://mgimond.github.io/tukeyedar/articles/RLine.html","id":"resampling-the-model-residuals","dir":"Articles","previous_headings":"Computing a confidence interval","what":"Resampling the model residuals","title":"Resistant Line","text":", fit resistant line extract residuals. re-run model many times replacing original y values modeled y values plus resampled residuals generate confidence intervals. Now plot distributions,  tabulate 95% confidence interval.","code":"n  <- 999 # Set number of iterations M  <- eda_rline(neoplasms, Temp, Mortality) # Fit the resistant line bt <- array(0, dim=c(n, 2)) # Create empty bootstrap array for(i in 1:n){ #bootstrap loop   df.bt <- data.frame(x=M$x, y = M$y +sample(M$res,replace=TRUE))   bt[i,1] <- eda_rline(df.bt,x,y)$a   bt[i,2] <- eda_rline(df.bt,x,y)$b } hist(bt[,1], main=\"Intercept distribution\") hist(bt[,2], main=\"Slope distribution\") conf <- t(data.frame(Intercept = quantile(bt[,1], p=c(0.05,0.95) ),                      Slope = quantile(bt[,2], p=c(0.05,0.95) ))) conf #>                    5%       95% #>  Intercept -75.916394 13.180681 #>  Slope       1.643678  3.553286"},{"path":"https://mgimond.github.io/tukeyedar/articles/RLine.html","id":"resampling-the-x-y-paired-values","dir":"Articles","previous_headings":"Computing a confidence interval","what":"Resampling the x-y paired values","title":"Resistant Line","text":", resample x-y paired values (replacement) compute resistant line time. Now plot distributions,  tabulate 95% confidence interval.","code":"n  <- 1999 # Set number of iterations bt <- array(0, dim=c(n, 2)) # Create empty bootstrap array for(i in 1:n){ #bootstrap loop   recs <- sample(1:nrow(neoplasms), replace = TRUE)   df.bt <- neoplasms[recs,]   bt[i,1]=eda_rline(df.bt,Temp,Mortality)$a   bt[i,2]=eda_rline(df.bt,Temp,Mortality)$b } hist(bt[,1], main=\"Intercept distribution\") hist(bt[,2], main=\"Slope distribution\") conf <- t(data.frame(Intercept = quantile(bt[,1], p=c(0.05,0.95) ),                      Slope = quantile(bt[,2], p=c(0.05,0.95) ))) conf #>                    5%       95% #>  Intercept -110.38963 13.187096 #>  Slope        1.64348  4.183534"},{"path":"https://mgimond.github.io/tukeyedar/articles/RLine.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Resistant Line","text":"Applications, Basics Computing Exploratory Data Analysis, P.F. Velleman D.C. Hoaglin, 1981. Understanding robust exploratory data analysis, D.C. Hoaglin, F. Mosteller J.W. Tukey, 1983.","code":""},{"path":"https://mgimond.github.io/tukeyedar/articles/symqq.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"The symmetry QQ plot","text":"symmetry QQ plot inspired Chambers et al.’s symmetry plot pairs quantiles lower half batch values matching quantiles batch’s upper half values. median value used define halves follows: \\[ lower\\ half = median - x_i \\] \\[ upper\\ half = x_{n+1-} - median \\] \\(n\\) number values \\(x\\), \\(\\) = 1 \\(n/2\\) \\(n\\) even \\(\\) = 1 \\((n+1)/2\\) \\(n\\) odd. plot interpreted differently QQ plot. data symmetrical batch’s median value, points hug \\(x=y\\) line. example, given batch 1000 normally distributed values shown left density plot, expect symmetry QQ plot show points close \\(x=y\\) line shown right plot.  axes symmetry QQ plot show distance observation batch batch’s median value. units batch. Points close 0 observations closest median. Points furthest 0 tail ends distribution.","code":""},{"path":"https://mgimond.github.io/tukeyedar/articles/symqq.html","id":"the-symmetry-qq-plot-function","dir":"Articles","previous_headings":"","what":"The symmetry QQ plot function","title":"The symmetry QQ plot","text":"symmetry QQ plot generated using eda_sym() function. exploring function output, let’s first generate data. , ’ll create slightly skewed dataset (one skewed towards larger values). Next, let’s generate symmetry QQ plot.  familiar use eda_qq empirical QQ plot function, familiar grey boxes highlight mid 75% values. , given x y axes mapping lower upper halves batch, lower part grey region bounded 0 given 0 defined batch’s mid-point. example, points hug \\(x=y\\) line, even mid 75% values covered grey region. expected given generated right skewed dataset. example, point lower half x 1 unit away median matching quantile upper half x 1.4 units away median placing away median lower half counterpart. skew becomes pronounced move closer tails. furthest point away median 1.4 units lower half little less 4 units away upper half. eda_sym function allows use re-expression. feature can helpful one seeks symmetrize batch values using power transformation. example, wanted render x symmetrical, try power 0.5 (.e. square root) setting argument p = 0.5.  , square root transformation good job rendering x symmetrical. Note points hug \\(x=y\\) exactly–fine. don’t want see systematic bend points away \\(x=y\\) line. example, aggressive power transformation chose log transformation (p = 0), end left skewed batch values.","code":"set.seed(123)  x <- rgamma(100, shape = 2, scale = 1) library(tukeyedar)  eda_sym(x) eda_sym(x, p = 0.5) eda_sym(x, p = 0)"},{"path":"https://mgimond.github.io/tukeyedar/articles/symqq.html","id":"reference","dir":"Articles","previous_headings":"","what":"Reference","title":"The symmetry QQ plot","text":"John M. Chambers, William S. Cleveland, Beat Kleiner, Paul . Tukey. Graphical Methods Data Analysis. 1983.","code":""},{"path":"https://mgimond.github.io/tukeyedar/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Manuel Gimond. Author, maintainer.","code":""},{"path":"https://mgimond.github.io/tukeyedar/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"text","code":"@Misc{,   title = {tukeyedar: A package of Tukey inspired EDA functions},   author = {Manuel Gimond},   url = {https://mgimond.github.io/tukeyedar/},   year = {2024}, }"},{"path":"https://mgimond.github.io/tukeyedar/index.html","id":"tukeyedar","dir":"","previous_headings":"","what":"Tukey Inspired Exploratory Data Analysis Functions","title":"Tukey Inspired Exploratory Data Analysis Functions","text":"tukeyedar package houses data exploration tools. Many functions inspired work published Tukey (1977), Hoaglin (1983), Velleman Hoaglin (1981), Cleveland (1993). package initially developed introductory course Exploratory Data Analysis (EDA). , many functions undergone rigorous testing validation typically required research production use. Users advised exercise caution verify results independently applying package critical high-stakes contexts.","code":""},{"path":"https://mgimond.github.io/tukeyedar/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tukey Inspired Exploratory Data Analysis Functions","text":"can install development version tukeyedar GitHub : Note vignettes automatically generated command, however, vignettes available website (see next section). want local version vignettes, add build_vignettes = TRUE parameter. , reason vignettes created, might want re-install package force=TRUE parameter.","code":"install.packages(\"remotes\") remotes::install_github(\"mgimond/tukeyedar\") remotes::install_github(\"mgimond/tukeyedar\", build_vignettes = TRUE) remotes::install_github(\"mgimond/tukeyedar\", build_vignettes = TRUE, force=TRUE)"},{"path":"https://mgimond.github.io/tukeyedar/index.html","id":"vignettes","dir":"","previous_headings":"","what":"Vignettes","title":"Tukey Inspired Exploratory Data Analysis Functions","text":"’s strongly recommended read vignettes. can accessed website: detailed rundown resistant line function median polish empirical QQ plot symmetry QQ plot residual-fit spread plot chose vignettes locally created installed package, can view locally via vignette(\"RLine\", package = \"tukeyedar\"). use dark themed IDE, vignettes may render well might opt view web browser via functions RShowDoc(\"RLine\", package = \"tukeyedar\").","code":""},{"path":"https://mgimond.github.io/tukeyedar/index.html","id":"using-the-functions","dir":"","previous_headings":"","what":"Using the functions","title":"Tukey Inspired Exploratory Data Analysis Functions","text":"functions start eda_. example, generate three point summary plot mpg vs. disp mtcars dataset, type: Note functions pipe friendly. examples:","code":"library(tukeyedar) eda_3pt(mtcars, disp, mpg) # Using R >= 4.1 mtcars |>  eda_3pt(disp, mpg)  # Using magrittr (or any of the tidyverse packages) library(magrittr) mtcars %>% eda_3pt(disp, mpg)"},{"path":"https://mgimond.github.io/tukeyedar/reference/age_height.html","id":null,"dir":"Reference","previous_headings":"","what":"Age vs. height for private and rural school children — age_height","title":"Age vs. height for private and rural school children — age_height","text":"data reproduced Hoaglin et al.'s book  originally sourced Bernard G. Greenberg (1953) American Journal Public Health (vol 43, pp. 692-699). dataset tabulate children's height weight urban private rural public schools.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/age_height.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Age vs. height for private and rural school children — age_height","text":"","code":"age_height"},{"path":"https://mgimond.github.io/tukeyedar/reference/age_height.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Age vs. height for private and rural school children — age_height","text":"data frame 18 rows 2 variables: Months Child's age months Height Child's height cm","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/age_height.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Age vs. height for private and rural school children — age_height","text":"Understanding robust exploratory data analysis, D.C. Hoaglin, F. Mosteller J.W. Tukey. (page 135)","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_3pt.html","id":null,"dir":"Reference","previous_headings":"","what":"3-point summary plot — eda_3pt","title":"3-point summary plot — eda_3pt","text":"eda_3pt splits data 3 groups (whose summary locations defined respective medians), two half slopes linking groups. function return scatter plot showing half-slopes red solid lines. solid grey slope linking tail-end groups shows desired shape half-slopes. goal two halve slopes line closely possible solid grey slope via re-expression techniques seeking linear relationship variables. function also return half-slopes ratio hsrtio direction re-expression X Y values ladder powers.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_3pt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"3-point summary plot — eda_3pt","text":"","code":"eda_3pt(   dat,   x,   y,   px = 1,   py = 1,   tukey = TRUE,   axes = TRUE,   pch = 21,   equal = TRUE,   p.col = \"grey50\",   p.fill = \"grey80\",   size = 0.8,   alpha = 0.7,   xlab = NULL,   ylab = NULL,   dir = TRUE,   grey = 0.6,   ... )"},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_3pt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"3-point summary plot — eda_3pt","text":"dat Dataframe. x Variable assigned x axis. y Variable assigned y axis. px Power transformation apply x-variable. py Power transformation apply y-variable. tukey Boolean determining Tukey transformation adopted (FALSE adopts Box-Cox transformation). axes Boolean determining axes drawn. pch Point symbol type. equal Boolean determining axes lengths match (.e. square plot). p.col Color point symbol. p.fill Point fill color passed bg (used pch ranging 21-25). size Point size (0-1). alpha Point transparency (0 = transparent, 1 = opaque). applicable rgb() used define point colors. xlab X label output plot. ylab Y label output plot. dir Boolean indicating suggested ladder power direction displayed. grey Grey level apply plot elements (0 1 1 = black). ... parameters passed graphics::plot function.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_3pt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"3-point summary plot — eda_3pt","text":"Generates plot returns list following named components: hsrtio: ratio slopes. value close one suggests transformation needed. xmed: x-coordinate values three summary points. ymed: y-coordinate values three summary points.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_3pt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"3-point summary plot — eda_3pt","text":"Computes three-point summary originally defined Tukey's EDA book (see reference).","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_3pt.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"3-point summary plot — eda_3pt","text":"Velleman, P. F., D. C. Hoaglin. 1981. Applications, Basics Computing Exploratory Data Analysis. Boston: Duxbury Press. D. C. Hoaglin, F. Mosteller, J. W. Tukey. 1983. Understanding Robust Exploratory Data Analysis. Wiley. Tukey, John W. 1977. Exploratory Data Analysis. Addison-Wesley.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_3pt.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"3-point summary plot — eda_3pt","text":"","code":"hsratio <- eda_3pt(cars, speed, dist)  hsratio <- eda_3pt(cars, speed, dist, py = 1/3, ylab=expression(\"Dist\"^{1/3}))   #' # This next example models gas consumption as a function of engine displacement. # It applies a transformation to both variables via the px and py arguments. eda_3pt(mtcars, disp, mpg,  px = -1/3, py = -1,        ylab = \"gal/mi\", xlab = expression(\"Displacement\"^{-1/3}))"},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_add.html","id":null,"dir":"Reference","previous_headings":"","what":"Add graphical EDA elements to existing plot — eda_add","title":"Add graphical EDA elements to existing plot — eda_add","text":"eda_add  adds graphical EDA elements scatter plot. Currently adds eda_rline fit points.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_add.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add graphical EDA elements to existing plot — eda_add","text":"","code":"eda_add(   x,   pch = 24,   p.col = \"darkred\",   p.fill = \"yellow\",   lty = 1,   l.col = \"darkred\" )"},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_add.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add graphical EDA elements to existing plot — eda_add","text":"x Object class eda_rline. pch Point symbol type. p.col Point color passed col. p.fill Point fill color passed bg (used pch ranging 21-25). lty Line type. l.col Line color.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_add.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add graphical EDA elements to existing plot — eda_add","text":"Returns eda_rline intercept slope. : Intercept b: Slope","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_add.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add graphical EDA elements to existing plot — eda_add","text":"function adds eda_rline slope 3-pt summary points existing scatter plot. See Resistant Line article detailed breakdown resistant line technique.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_add.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add graphical EDA elements to existing plot — eda_add","text":"","code":"eda_lm(mtcars, x = wt, y = mpg) #>       int      wt^1  #> 37.285126 -5.344472  Mr <- eda_rline(mtcars, x=wt, y=mpg) eda_add(Mr, l.col = \"blue\")  #> $a #> [1] 37.61522 #>  #> $b #> [1] -5.504814 #>"},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_bipow.html","id":null,"dir":"Reference","previous_headings":"","what":"Ladder of powers transformation on bivariate data with three-point summary plot — eda_bipow","title":"Ladder of powers transformation on bivariate data with three-point summary plot — eda_bipow","text":"Re-expresses vector ladder powers. Requires eda_3pt() function.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_bipow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ladder of powers transformation on bivariate data with three-point summary plot — eda_bipow","text":"","code":"eda_bipow(dat, x, y, p = c(-1, 0, 0.5, 1, 2), tukey = FALSE, ...)"},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_bipow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ladder of powers transformation on bivariate data with three-point summary plot — eda_bipow","text":"dat Dataframe. x Variable assigned x axis. y Variable assigned y axis. p Vector powers. tukey set TRUE, adopt Tukey's power transformation. FALSE, adopt Box-Cox transformation. ... parameters passed graphics::plot function.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_bipow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ladder of powers transformation on bivariate data with three-point summary plot — eda_bipow","text":"return value","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_bipow.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Ladder of powers transformation on bivariate data with three-point summary plot — eda_bipow","text":"Generates matrix scatter plots boxplots various re-expressions x y values. 3-point summary associated half-slopes also plotted (function makes use eda_3pt function). values re-expressed using either Tukey power transformation Box-Cox transformation (default). See eda_re information transformation techniques. Axes labels omitted reduce plot clutter.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_bipow.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Ladder of powers transformation on bivariate data with three-point summary plot — eda_bipow","text":"Tukey, John W. 1977. Exploratory Data Analysis. Addison-Wesley.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_bipow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ladder of powers transformation on bivariate data with three-point summary plot — eda_bipow","text":"","code":"data(cars) # Example 1 eda_bipow(dat = cars, x = speed, y = dist)  # Custom powers eda_bipow(dat = cars, x = speed, y = dist, p = c(-1, -0.5, 0, 0.5, 1))  # Adopt Tukey transformation eda_bipow(dat = cars, x = speed, y = dist, tukey = TRUE, p = c(-1, -0.5, 0, 0.5, 1))"},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_boxls.html","id":null,"dir":"Reference","previous_headings":"","what":"Boxplots equalized by level and spread — eda_boxls","title":"Boxplots equalized by level and spread — eda_boxls","text":"eda_boxls creates boxplots conditioned categorical variable providing option level data equalize spreads.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_boxls.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Boxplots equalized by level and spread — eda_boxls","text":"","code":"eda_boxls(   dat,   x,   fac,   p = 1,   tukey = FALSE,   outlier = TRUE,   out.txt = NULL,   type = \"none\",   notch = FALSE,   horiz = FALSE,   xlab = NULL,   ylab = NULL,   grey = 0.6,   fill = \"grey70\",   boxcol = NULL,   outcol = \"grey40\",   whiskcol = \"grey40\",   medcol = \"grey40\",   reorder = TRUE,   reorder.stat = \"median\",   show.par = TRUE )"},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_boxls.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Boxplots equalized by level and spread — eda_boxls","text":"dat Dataframe. x Continuous variable. fac Categorical variable. p Power transformation apply continuous variable. tukey Boolean determining Tukey transformation adopted (FALSE adopts Box-Cox transformation). outlier Boolean indicating outliers plotted. .txt Column whose values used label outliers. set NULL (default), record number displayed. type Plot type. \"none\" = equalization ; \"l\" = equalize level; \"ls\" = equalize level spread. notch Boolean determining notches added. horiz plot horizontally (TRUE) vertically (FALSE). xlab X label output plot. ylab Y label output plot. grey Grey level apply plot elements (0 1 1 = black). fill Boxplot fill color. boxcol Boxplot outline color. outcol Outlier color. whiskcol Whisker line color. medcol Median line color. reorder Boolean determining factors reordered based median, upper quartile lower quartile (set reorder.type). reorder.stat Statistic reorder level reorder set TRUE. Either \"median\", \"upper\" (upper quartile) \"lower\" (lower quartile). type set value \"none\", argument ignored stat defaults \"median\". show.par Boolean determining power transformation displayed plot.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_boxls.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Boxplots equalized by level and spread — eda_boxls","text":"values returned","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_boxls.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Boxplots equalized by level and spread — eda_boxls","text":"default, boxplots re-ordered median values. outlier text displayed value, modified data equalized level spread. Note notch offers 95 percent test null true medians equal assuming distribution batch approximately normal. notches overlap, can assume medians significantly different 0.05 level. Note notches correct multiple comparison issues three batches plotted.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_boxls.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Boxplots equalized by level and spread — eda_boxls","text":"","code":"# A basic boxplot. The outlier is labeled with the row number by default. eda_boxls(mtcars,mpg, cyl, type=\"none\")   # A basic boxplot. The outlier is labeled with its own value. eda_boxls(mtcars,mpg, cyl, type=\"none\", out.txt=mpg )   # Boxplot equalized by level. Note that the outlier text is labeled with its # original value. eda_boxls(mtcars,mpg, cyl, type=\"l\", out.txt=mpg )  #> ======================== #> Note that the data have been equalized with \"type\" set to \"l\". #> ========================  # Boxplots equalized by level and spread eda_boxls(mtcars,mpg, cyl, type=\"ls\", out.txt=mpg )  #> ======================== #> Note that the data have been equalized with \"type\" set to \"ls\". #> ========================  # Hide outlier eda_boxls(mtcars,mpg, cyl, type=\"ls\", out.txt=mpg , outlier=FALSE)  #> ======================== #> Note that the data have been equalized with \"type\" set to \"ls\". #> ========================  # Equalizing level helps visualize increasing spread with increasing # median value eda_boxls(iris, Sepal.Length, Species, type = \"l\",  out.txt=Sepal.Length)  #> ======================== #> Note that the data have been equalized with \"type\" set to \"l\". #> ========================  # For long factor level names, flip plot eda_boxls(iris, Sepal.Length, Species, out.txt=Sepal.Length , horiz = TRUE)   # By default, plots are ordered by their medians. singer <- lattice::singer eda_boxls(singer, height, voice.part, out.txt=height, horiz = TRUE)   # To order by top quartile, set reorder.stat to \"upper\" eda_boxls(singer, height, voice.part, out.txt=height, horiz = TRUE,           reorder.stat = \"upper\")"},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_dens.html","id":null,"dir":"Reference","previous_headings":"","what":"Overlapping density distributions for two variables — eda_dens","title":"Overlapping density distributions for two variables — eda_dens","text":"eda_dens generates overlapping density distributions two variables.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_dens.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Overlapping density distributions for two variables — eda_dens","text":"","code":"eda_dens(   x,   y,   fac = NULL,   p = 1L,   tukey = FALSE,   fx = NULL,   fy = NULL,   grey = 0.6,   col = \"red\",   show.par = TRUE,   alpha = 0.4,   xlab = NULL,   ylab = NULL,   xaxis = NULL,   switch = FALSE,   legend = TRUE,   ... )"},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_dens.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Overlapping density distributions for two variables — eda_dens","text":"x Vector first variable, dataframe. y Vector second variable, column defining continuous variable x dataframe. fac Column defining categorical variable x dataframe. p Power transformation apply sets values. tukey Boolean determining Tukey transformation adopted (FALSE adopts Box-Cox transformation). fx Formula apply x variable. computed transformation applied x variable. fy Formula apply y variable. computed transformation applied y variable. grey Grey level apply plot elements (0 1 1 = black). col Fill color second density distribution. show.par Boolean determining parameters power transformation formula displayed. alpha Fill transparency (0 = transparent, 1 = opaque). applicable rgb() used define fill colors. xlab X variable label. Ignored x dataframe. x-axis label! ylab Y variable label. Ignored x dataframe. y-axis label! xaxis Label x-axis. Defaults \"Value\". switch Boolean determining axes swapped. applies dataframe input. Ignored vectors passed function. legend Boolean determining legend added plot. ... Arguments passed stats::density() function.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_dens.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Overlapping density distributions for two variables — eda_dens","text":"return value.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_dens.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Overlapping density distributions for two variables — eda_dens","text":"function generate overlapping density plots first variable assigned grey color second variable assigned default red color.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_dens.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Overlapping density distributions for two variables — eda_dens","text":"","code":"# Passing data as two separate vector objects  set.seed(207)  x <- rbeta(1000,2,8)  y <- x * 1.5 + 0.1  eda_dens(x, y)    # Passing data as a dataframe  dat <- data.frame(val = c(x, y),                    grp = c(rep(\"x\", length(x)), rep(\"y\", length(y))))  eda_dens(dat, val, grp)"},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_fval.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate quantile f-values — eda_fval","title":"Calculate quantile f-values — eda_fval","text":"Calculates Fractional Values (f-Values).","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_fval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate quantile f-values — eda_fval","text":"","code":"eda_fval(x, q.type = 5)"},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_fval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate quantile f-values — eda_fval","text":"x Vector whose f-values computed. q.type integer specifying algorithm use computing F-values.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_fval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate quantile f-values — eda_fval","text":"numeric vector length x, containing f-values input value. order returned f-values matches input vector.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_fval.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate quantile f-values — eda_fval","text":"function computes fractional value (f-value) element numeric vector x. f-value provides measure position data point relative rest data, scaled range [0,1]. fraction sometimes reported probability cumulative frequency.  Different algorithms used compute f-value. eda_fval offers optional algorithm type 4 9 documented stats::quantile. algorithms used : 4: f = / n, 5: f = (- 0.5) / n, 6: f = / (n + 1), 7: f = ( - 1) / (n - 1), 8: f = (- 1/3) / (n + 1/3), 9: f = (- 3/8) / (n + 1/4). f fraction values lies index , n total number values.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_fval.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Calculate quantile f-values — eda_fval","text":"John M. Chambers, William S. Cleveland, Beat Kleiner, Paul . Tukey. Graphical Methods Data Analysis (1983)","code":""},{"path":[]},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_fval.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate quantile f-values — eda_fval","text":"","code":"set.seed(321)  z <- round(runif(10, 1, 20))  z #>  [1] 19 19  6  6  8  7 10  7 10 16   # William Cleveland's f-values algorithm  eda_fval(z) #>  [1] 0.85 0.95 0.05 0.15 0.45 0.25 0.55 0.35 0.65 0.75   # Algorithm used by the stats::quantile() function  eda_fval(z, q.type = 7) #>  [1] 0.8888889 1.0000000 0.0000000 0.1111111 0.4444444 0.2222222 0.5555556 #>  [8] 0.3333333 0.6666667 0.7777778"},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_jitter.html","id":null,"dir":"Reference","previous_headings":"","what":"Jitter plot — eda_jitter","title":"Jitter plot — eda_jitter","text":"eda_jitter creates jitter plot continuous variable conditioned categorical variable.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_jitter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Jitter plot — eda_jitter","text":"","code":"eda_jitter(   dat,   x,   fac = NULL,   jitter = 0.05,   p = 1,   tukey = FALSE,   horiz = FALSE,   stat = mean,   show.stat = TRUE,   stat.type = \"p\",   stat.col = \"firebrick\",   stat.fill = \"bisque\",   stat.size = 2,   stat.pch = 21,   stat.pad = 1,   xlab = NULL,   ylab = NULL,   grey = 0.6,   pch = 21,   p.col = \"grey50\",   p.fill = \"grey80\",   size = 0.8,   alpha = 0.8,   reorder = TRUE,   show.par = TRUE,   ylim = NULL )"},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_jitter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Jitter plot — eda_jitter","text":"dat Dataframe. x Continuous variable. fac Categorical variable. jitter Jittering parameter. fraction group width (0 1). p Power transformation apply variable tukey Boolean determining Tukey transformation adopted (FALSE adopts Box-Cox transformation). horiz Plot horizontally (TRUE) vertically (FALSE). stat Choice summary statistic use fitting central value data. stat can either mean median. wrap stat parameter quotes. show.stat Boolean determining summary statistic added jitter plot. stat.type Symbol use display statistical summary. Can either point, \"p\", line, \"l\". stat.col Symbol color use display statistical summary. stat.type point, color passed outline point symbol type, stat.pch, 21 25. stat.fill Fill color use point statistical summary point symbol type, stat.pch, 21 25. Ignored stat.type = \"l\". stat.size Size point statistical summary stat.type = \"p\", width line stat.type = \"l\". stat.pch Point statistical summary type (1 25). Ignored stat.type = \"l\". stat.pad Fraction add length line statistical summary. Ignored stat.type = \"p\". xlab X label output plot ylab Y label output plot grey Grey level apply plot elements (0 1 1 = black) pch Point symbol type p.col Color point symbol p.fill Point fill color passed bg (used pch ranging 21-25). size Point size (0-1). alpha Point transparency (0 = transparent, 1 = opaque). applicable rgb() used define point colors. reorder Boolean determining factors reordered based stat. show.par Boolean determining power transformation displayed plot. ylim Define custom y axis limits (x limits horiz=TRUE).","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_jitter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Jitter plot — eda_jitter","text":"values returned","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_jitter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Jitter plot — eda_jitter","text":"Function generates jitter plot univariate dataset. categorical variable passed function, single jitter plot created data.  default, plots ordered based statistic, stat, used generate central value.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_jitter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Jitter plot — eda_jitter","text":"","code":"# A basic jitter plot for a single variable where the mean is automatically # fitted to the data eda_jitter(iris, Sepal.Width)   # A basic jitter plot conditioned on a categorical variable eda_jitter(iris, Sepal.Width, Species)   # Use line instead of point for summary statistic eda_jitter(iris, Sepal.Width, Species, stat.type = \"l\")   # You can apply a transformation to the data. The summary statistic will be # computed after the data are transformed. eda_jitter(mtcars, hp, cyl, stat.type = \"l\", p = 0)"},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_lm.html","id":null,"dir":"Reference","previous_headings":"","what":"Regression plot (with optional LOESS fit) — eda_lm","title":"Regression plot (with optional LOESS fit) — eda_lm","text":"eda_lm generates scatter plot fitted regression line. loess line can  also added plot model comparison. axes scaled respective standard  deviations match axes unit length.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_lm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Regression plot (with optional LOESS fit) — eda_lm","text":"","code":"eda_lm(   dat,   x,   y,   xlab = NULL,   ylab = NULL,   px = 1,   py = 1,   tukey = FALSE,   show.par = TRUE,   reg = TRUE,   poly = 1,   robust = FALSE,   w = NULL,   sd = TRUE,   mean.l = TRUE,   asp = TRUE,   grey = 0.6,   pch = 21,   p.col = \"grey50\",   p.fill = \"grey80\",   size = 0.8,   alpha = 0.8,   q = FALSE,   inner = 0.68,   q.type = 5,   loe = FALSE,   lm.col = rgb(1, 0.5, 0.5, 0.8),   loe.col = rgb(0.3, 0.3, 1, 1),   stats = FALSE,   stat.size = 0.8,   loess.d = list(family = \"symmetric\", span = 0.7, degree = 1),   rlm.d = list(psi = \"psi.bisquare\"),   ... )"},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_lm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Regression plot (with optional LOESS fit) — eda_lm","text":"dat Dataframe. x Column assigned x axis. y Column assigned y axis. xlab X label output plot. ylab Y label output plot. px Power transformation apply x-variable. py Power transformation apply y-variable. tukey Boolean determining Tukey transformation adopted (FALSE adopts Box-Cox transformation). show.par Boolean determining power transformation displayed plot. reg Boolean indicating whether least squares regression line plotted. poly Polynomial order. robust Boolean indicating robust regression used. w Weight pass regression model. sd Boolean determining standard deviation lines plotted. mean.l Boolean determining x y mean lines added plot. asp Boolean determining plot aspect ratio equal ratio x y standard deviations. value FALSE defaults base plot's default aspect ratio. value TRUE uses aspect ratio sd(x)/sd(y). grey Grey level apply plot elements (0 1 1 = black). pch Point symbol type. p.col Color point symbol. p.fill Point fill color passed bg (used pch ranging 21-25). size Point size (0-1). alpha Point transparency (0 = transparent, 1 = opaque). applicable rgb() used define point colors. q Boolean determining shaded region showing mid-portion data added plot. inner Fraction mid-values highlight q.  Defaults mid 68 percent values. q.type Quantile type. Defaults 5 (Cleveland's f-quantile definition). loe Boolean indicating loess curve fitted. lm.col Regression line color. loe.col LOESS curve color. stats Boolean indicating regression summary statistics displayed. stat.size Text size stats output plot. loess.d list arguments passed loess.smooth function. robust loess used default. rlm.d list arguments passed MASS::rlm function. ... used.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_lm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Regression plot (with optional LOESS fit) — eda_lm","text":"Returns list class eda_lm. Output includes following reg = TRUE. Returns NULL otherwise. residuals: Regression model residuals : Intercept b: Polynomial coefficient(s) fitted.values: Fitted values x: x variable x_lab: x label","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_lm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Regression plot (with optional LOESS fit) — eda_lm","text":"function plot regression line , requested, loess fit. function adopts least squares fitting technique default. defaults first order polynomial fit. polynomial order can specified via poly argument.  plot displays +/- 1 standard deviations dashed lines. theory, x y values follow perfectly Normal distribution, roughly 68 percent points fall lines.  true 68 percent values can displayed shaded region setting q=TRUE. uses quantile function compute upper lower bounds defining inner 68 percent values. data follow Normal distribution, grey rectangle edges coincide +/- 1SD dashed lines. wish show interquartile ranges (IQR) instead inner 68 percent values, simply set inner = 0.5).  plot option re-express values via px py arguments. note re-expression produces NaN values (negative value logged) points removed plot. result fewer observations plotted. observations removed result re-expression warning message displayed console. re-expression powers shown upper right side plot. suppress display re-expressions set show.par = FALSE.  robust argument set TRUE, MASS's built-robust fitting model, rlm, used fit regression line data. rlm arguments can passed list via rlm.d argument.","code":""},{"path":[]},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_lm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Regression plot (with optional LOESS fit) — eda_lm","text":"","code":"# Add a regular (OLS) regression model and loess smooth to the data eda_lm(mtcars, wt, mpg, loe = TRUE)  #>       int      wt^1  #> 37.285126 -5.344472   # Add the inner 68% quantile to compare the true 68% of data to the SD eda_lm(mtcars, wt, mpg, loe = TRUE, q = TRUE)  #>       int      wt^1  #> 37.285126 -5.344472   # Show the IQR box eda_lm(mtcars, wt, mpg, loe = TRUE, q = TRUE, sd = FALSE, inner = 0.5)  #>       int      wt^1  #> 37.285126 -5.344472   # Fit an OLS to income for Female vs Male df2 <- read.csv(\"https://mgimond.github.io/ES218/Data/Income_education.csv\") eda_lm(df2, x=B20004013, y = B20004007, xlab = \"Female\", ylab = \"Male\",             loe = TRUE)  #>          int     Female^1  #> 10503.090485     1.086416   # Add the inner 68% quantile to compare the true 68% of data to the SD eda_lm(df2, x = B20004013, y = B20004007, xlab = \"Female\", ylab = \"Male\",             q = TRUE)  #>          int     Female^1  #> 10503.090485     1.086416   # Apply a transformation to x and y axes: x -> 1/3 and y -> log eda_lm(df2, x = B20004013, y = B20004007, xlab = \"Female\", ylab = \"Male\",             px = 1/3, py = 0, q = TRUE, loe = TRUE)  #>        int   Female^1  #> 8.58646713 0.02287702   # Fit a second order polynomial eda_lm(mtcars, hp, mpg, poly = 2)  #>           int          hp^1          hp^2  #> 40.4091172029 -0.2133082599  0.0004208156   # Fit a robust regression model eda_lm(mtcars, hp, mpg, robust = TRUE, poly = 2)  #>           int          hp^1          hp^2  #> 39.3003734539 -0.2062942523  0.0004113048"},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_lsum.html","id":null,"dir":"Reference","previous_headings":"","what":"Tukey's letter value summary — eda_lsum","title":"Tukey's letter value summary — eda_lsum","text":"eda_lsum letter value summary introduced John Tukey extends boxplot's 5 number summary exploring symmetry batch depth levels half (median) fourth (quartiles).","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_lsum.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tukey's letter value summary — eda_lsum","text":"","code":"eda_lsum(x, l = 5, all = TRUE)"},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_lsum.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tukey's letter value summary — eda_lsum","text":"x Vector l Number levels (max = 9) Generate upper, lower mid summaries TRUE just generate mid summaries FALSE","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_lsum.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tukey's letter value summary — eda_lsum","text":"Returns dataframe letter value summary.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_lsum.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tukey's letter value summary — eda_lsum","text":"Outputs data frame letter value summary.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_lsum.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Tukey's letter value summary — eda_lsum","text":"Exploratory Data Analysis, John Tukey, 1973.","code":""},{"path":[]},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_lsum.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tukey's letter value summary — eda_lsum","text":"","code":"x <- c(22, 8, 11, 3, 26, 1, 14, 18, 20, 25, 24) eda_lsum(x) #>   letter depth lower   mid upper spread #> 1      M   6.0  18.0 18.00  18.0    0.0 #> 2      H   3.5   9.5 16.25  23.0   13.5 #> 3      E   2.0   3.0 14.00  25.0   22.0 #> 4      D   1.5   2.0 13.75  25.5   23.5 #> 5      C   1.0   1.0 13.50  26.0   25.0"},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_moments.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute moments of a dataset — eda_moments","title":"Compute moments of a dataset — eda_moments","text":"Computes mean, variance, skewness, excess kurtosis given numeric vector.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_moments.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute moments of a dataset — eda_moments","text":"","code":"eda_moments(x)"},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_moments.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute moments of a dataset — eda_moments","text":"x numeric vector representing dataset.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_moments.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute moments of a dataset — eda_moments","text":"named vector count, mean, variance, skewness, excess kurtosis data.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_normfit.html","id":null,"dir":"Reference","previous_headings":"","what":"Normal fit vs density plot — eda_normfit","title":"Normal fit vs density plot — eda_normfit","text":"eda_normfit generates fitted Normal distribution data option compare density distribution.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_normfit.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Normal fit vs density plot — eda_normfit","text":"","code":"eda_normfit(   dat,   x = NULL,   grp = NULL,   p = 1,   tukey = FALSE,   show.par = TRUE,   sq = FALSE,   inner = 0.6826,   dens = TRUE,   bw = \"SJ-dpi\",   kernel = \"gaussian\",   pch = 16,   size = 0.8,   alpha = 0.3,   p.col = \"grey50\",   p.fill = \"grey80\",   grey = 0.7,   col.ends = \"grey90\",   col.mid = \"#EBC89B\",   col.ends.dens = \"grey90\",   col.mid.dens = \"#EBC89B\",   offset = 0.02,   tsize = 1.5,   xlab = NULL,   ylab = NULL,   ... )"},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_normfit.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Normal fit vs density plot — eda_normfit","text":"dat Vector continuous values, dataframe. x Continuous value column dat dataframe, ignored otherwise. grp Categorical variable column dat dataframe, ignored otherwise. p Power transformation apply values. tukey Boolean determining Tukey transformation adopted (TRUE) Box-Cox transformation adopted (FALSE). show.par Boolean determining power transformation used data displayed plot's upper-right corner. sq Boolean determining plot square. inner Fraction values captured inner color band normal density plots. Defaults 0.6826 (inner 68\\ values). dens Boolean determining density plot displayed alongside Normal fit plot. bw Bandwidth parameter passed density() function. kernel Kernel parameter passed density() function. pch Point symbol type. size Point size. alpha Fill transparency (0 = transparent, 1 = opaque). applicable rgb() used define fill colors. p.col Color point symbol. p.fill Point fill color passed bg (used pch ranging 21-25). grey Grey level apply plot elements axes, labels, etc... (0 1 1 = black). col.ends Fill color tail-ends Normal distribution. col.mid Fill color inner region Normal distribution. col.ends.dens Fill color ends density distribution. col.mid.dens Fill color middle band density distribution. offset value (x-axis units) defines gap left right side plots. Ignored dens FALSE. tsize Size plot title. xlab X variable label. ylab Y variable label. ... Note used.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_normfit.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Normal fit vs density plot — eda_normfit","text":"return value.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_normfit.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Normal fit vs density plot — eda_normfit","text":"function generate mirrored Normal distribution fitted data dens set FALSE side--side density/Normal fit plot dens set TRUE. latter, density plot left side Normal fit right side vertical axis.  plots two fill colors: one inner band outer band. inner band shows area curve encompasses desired fraction values defined inner. default, value 0.6826, 68.26\\ covered +/- 1 standard deviations Normal distribution). Normal fit plot, range computed theoretical Normal actual values. density plot, range computed actual values.  density plot desired, dens = TRUE, gap (defined offset) created left side density plot right side Normal fit plot. function makes use built-stats::density function. , can pass bw kernel parameters density() function. Points showing location values along y-axis also added help view distributions relative density Normal fit curves.  Measures centrality computed differently Normal fit density plots. mean added Normal fit plot median added density plot. measures centrality shown black horizontal lines plot. areas density Normal fit plots scaled peak values, respectively. , areas compared distributions.","code":""},{"path":[]},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_normfit.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Normal fit vs density plot — eda_normfit","text":"","code":"# Explore a skewed distribution set.seed(218) x <- rexp(500)  # Generate base histogram hist(x)   # Plot density/Normal fit plot eda_normfit(x)  eda_normfit(x)  # Limit the plot to just a Normal fit eda_normfit(x, dens = FALSE)  #>  #> !!!!!!!!!!!!!!!!!!!!!!!! #> Note that this is not a density plot. #> It's the Normal characterization of the data  #> using the data's standard deviation. #> !!!!!!!!!!!!!!!!!!!!!!!! #>   # The inner band's range can be modified. Here, we view the interquartile # range, the +/- 1 standard deviation range and the inner 95% range) OP <- par(mfrow = c(1,3)) invisible(sapply(c(0.5, 0.6826, 0.95),       function(prop) eda_normfit(x, inner = prop, tsize = 1,                                  ylab = paste(prop*100,\"% of values\"))))  par(OP)  # The bandwidth selector can also be specified OP <- par(mfrow=c(2,3))  invisible(sapply(c(\"SJ-dpi\", \"nrd0\", \"nrd\", \"SJ-ste\", \"bcv\", \"ucv\" ),        function(band) eda_normfit(x, bw = band, tsize=0.9, size=0, offset=0.005,                                   ylab = band)))  par(OP)  # The bandwidth argument can also be passed a numeric value OP <- par(mfrow=c(1,3)) invisible(sapply(c(0.2, 0.1, 0.05 ),        function(band) eda_normfit(x, bw = band, tsize=1,size=.5, offset=0.01,                                   ylab = band)))  par(OP)  # Examples of a few kernel options OP <- par(mfrow=c(1,3)) invisible(sapply(c(\"gaussian\", \"optcosine\", \"rectangular\" ),       function(k) eda_normfit(x, kernel = k, tsize=1, size=.5, offset=0.01,                                ylab = k)))  par(OP)  # Another example where data are passed as a dataframe set.seed(540) dat <- data.frame(value = rbeta(20, 1, 50),                  grp = sample(letters[1:3], 100, replace = TRUE)) eda_normfit(dat, value, grp)   # Points can be removed and the gap rendered narrower eda_normfit(dat, value, grp, size = 0, offset = 0.01)   # Color can be modified. Here we modify the density plot  fill colors eda_normfit(dat, value, grp, size = 0, offset = 0.01,             col.ends.dens = \"#A1D99B\", col.mid.dens = \"#E5F5E0\")   # A power transformation can be applied to the data. Here # we'll apply a log transformation eda_normfit(dat, value, grp, p = 0)"},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_pol.html","id":null,"dir":"Reference","previous_headings":"","what":"Median polish of two-way tables — eda_pol","title":"Median polish of two-way tables — eda_pol","text":"eda_pol Polishes two-way tables using median, means, customizable functions.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_pol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Median polish of two-way tables — eda_pol","text":"","code":"eda_pol(   x,   row = NULL,   col = NULL,   val = NULL,   stat = median,   plot = TRUE,   eps = 0.01,   maxiter = 5,   sort = FALSE,   p = 1,   tukey = FALSE,   offset = 1e-05,   col.quant = FALSE,   colpal = \"RdYlBu\",   adj.mar = TRUE,   res.size = 1,   row.size = 1,   col.size = 1,   res.txt = TRUE,   label.txt = TRUE )"},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_pol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Median polish of two-way tables — eda_pol","text":"x three column data frame. row Name column assigned row effect. col Name column assigned column effect. val Name column assigned response variable. stat Polishing statistic (default median). plot Boolean determining output plot generated. eps Convergence tolerance parameter. maxiter Maximum number iterations. sort Boolean determining effects row/columns sorted. p Re-expression power parameter. tukey Boolean determining Tukey's power transformation used. FALSE, Box-Cox transformation adopted. offset Offset add values leat one value 0 power negative. col.quant Boolean determining quantile classification scheme used. colpal Color palette adopt. adj.mar Boolean determining margin width needs accomodate labels. res.size Size residual values plot [0-1]. row.size Size row effect values plot [0-1]. col.size Size column effect values plot [0-1]. res.txt Boolean determining values added plot. label.txt Boolean determining margin column labels plotted.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_pol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Median polish of two-way tables — eda_pol","text":"list class eda_polish following named components: long median polish residuals three columns: Column levels, row levels residual values. wide median polish residuals table wide form. row  Row effects table col  Column effects table global  Overall value (common value) iter  Number iterations polish stabilizes. cv  Table residuals, row effects, column effects CV values long form. power  Transformation power applied values prior polishing. IQ_row  Ratio interquartile row effect values 80th quantile residuals. IQ_col  Ratio interquartile column effect values 80th quantile residuals.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_pol.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Median polish of two-way tables — eda_pol","text":"function performs polish two way table. default, applies median polish, statistical summaries mean can passed function via stat =  argument. function returns list row/column effects along global residual values. also generate colored table plot =   TRUE.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_pol.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Median polish of two-way tables — eda_pol","text":"Tukey, John W. 1977. Exploratory Data Analysis. Addison-Wesley Median polish article","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_pol.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Median polish of two-way tables — eda_pol","text":"","code":"df <- data.frame(region =  rep( c(\"NE\", \"NC\", \"S\", \"W\"), each = 5), edu = rep( c(\"ed8\", \"ed9to11\", \"ed12\", \"ed13to15\", \"ed16\"), 4), perc = c(25.3, 25.3, 18.2, 18.3, 16.3, 32.1, 29, 18.8,         24.3, 19, 38.8, 31, 19.3, 15.7, 16.8, 25.4, 21.1, 20.3, 24, 17.5))  M <- eda_pol(df, row = region, col = edu, val = perc, plot = FALSE) plot(M)"},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_qq.html","id":null,"dir":"Reference","previous_headings":"","what":"Quantile-Quantile and Tukey mean-difference plots — eda_qq","title":"Quantile-Quantile and Tukey mean-difference plots — eda_qq","text":"eda_qq Generates empirical QQ plot Tukey mean-difference plot","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_qq.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quantile-Quantile and Tukey mean-difference plots — eda_qq","text":"","code":"eda_qq(   x,   y = NULL,   fac = NULL,   norm = FALSE,   sym = FALSE,   p = 1L,   tukey = FALSE,   md = FALSE,   q.type = 5,   fx = NULL,   fy = NULL,   plot = TRUE,   show.par = TRUE,   grey = 0.6,   pch = 21,   p.col = \"grey50\",   p.fill = \"grey80\",   size = 1,   alpha = 0.8,   med = TRUE,   q = TRUE,   tails = FALSE,   inner = 0.75,   tail.pch = 21,   tail.p.col = \"grey70\",   tail.p.fill = NULL,   switch = FALSE,   xlab = NULL,   ylab = NULL,   title = NULL,   t.size = 1.2,   ... )"},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_qq.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quantile-Quantile and Tukey mean-difference plots — eda_qq","text":"x Vector first variable, dataframe. y Vector second variable, column defining continuous variable x dataframe. fac Column defining categorical variable x dataframe. categorical column must limited two levels (groups). dataframe. Ignored x y vectors. norm Defunct. Use eda_theo instead. sym Defunct. Use eda_sym instead. p Power transformation apply continuous variable(s). tukey Boolean determining Tukey transformation adopted (FALSE adopts Box-Cox transformation). md Boolean determining Tukey mean-difference plot generated. q.type integer 1 9 selecting one nine quantile algorithms. (See quantile function). fx Formula apply x variable pairing y. computed transformation applied x variable. fy Formula apply y variable pairing x. computed transformation applied y variable. plot Boolean determining plot generated. show.par Boolean determining parameters power transformation formula displayed. grey Grey level apply plot elements (0 1 1 = black). pch Point symbol type. p.col Color point symbol. p.fill Point fill color passed bg (used pch ranging 21-25). size Point size (0-1) alpha Point transparency (0 = transparent, 1 = opaque). applicable rgb() used define point color. med Boolean determining median lines drawn. q Boolean determining inner data region shaded. tails Boolean determining points outside inner region symbolized differently. Tail-end points symbolized via tail.pch,  tail.p.col tail.p.fill arguments. inner Fraction data considered \"mid values\". Defaults 75\\ tail-end points symbolized differently, tails=TRUE. tail.pch Tail-end point symbol type (See tails). tail.p.col Tail-end color point symbol (See tails). tail.p.fill Tail-end point fill color passed bg (used tail.pch ranging 21-25). switch Boolean determining axes swapped empirical QQ plot. applies dataframe input. Ignored vectors passed function. xlab X label output plot. Ignored x dataframe. ylab Y label output plot. Ignored x dataframe. title Title add plot. t.size Title size. ... used","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_qq.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quantile-Quantile and Tukey mean-difference plots — eda_qq","text":"Returns list following components: data: Dataframe input x y values. Data interpolated smallest quantile batch batch sizes differ. Values reflect power transformation defined p. p: Re-expression applied original values. fx: Formula applied x variable. fy: Formula applied y variable.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_qq.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Quantile-Quantile and Tukey mean-difference plots — eda_qq","text":"default, QQ plot highlight inner 75\\ x y axes mitigate visual influence extreme values. inner argument controls extent region. example inner = 0.5 highlight IQR region.  shaded regions distracting, can opt tail-end points symbolized differently setting tails = TRUE q = FALSE. tail-end point symbols can customized via tail.pch, tail.p.col tail.p.fill arguments.  middle dashed line represents batch's median value. can turned setting med = FALSE Console output prints suggested multiplicative additive offsets. adopts resistant line fitting technique derive coefficients. suggested offsets output applies raw re-expressed data ignores fx fy transformations applied data. Note suggested offsets may always parsimonious fit. Eyeballing offsets may sometimes result satisfactory characterization differences batches. See QQ plot article introduction use interpretation.  generate Tukey mean-difference plot, set med = TRUE.  information function interpreting QQ plot see QQ plot article.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_qq.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Quantile-Quantile and Tukey mean-difference plots — eda_qq","text":"John M. Chambers, William S. Cleveland, Beat Kleiner, Paul . Tukey. Graphical Methods Data Analysis (1983) Quantile-Quantile plot article","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_qq.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quantile-Quantile and Tukey mean-difference plots — eda_qq","text":"","code":"# Passing data as a dataframe  singer <- lattice::singer  dat <- singer[singer$voice.part  %in% c(\"Bass 2\", \"Tenor 1\"), ]  eda_qq(dat, height, voice.part)  #> [1] \"Suggested offsets:y = x * 1.04 + (-5.2163)\"  # If the shaded region is too distracting, you can apply a different symbol # to the tail-end points and different color to the points falling in the # inner region. eda_qq(dat, height, voice.part, q = FALSE, tails = TRUE, tail.pch = 3,        p.fill = \"coral\", size = 1.2, med = FALSE)  #> [1] \"Suggested offsets:y = x * 1.04 + (-5.2163)\"  # For a more traditional look to the QQ plot eda_qq(dat, height, voice.part, med = FALSE, q = FALSE)  #> [1] \"Suggested offsets:y = x * 1.04 + (-5.2163)\"  # Passing data as two separate vector objects  bass2 <- subset(singer, voice.part == \"Bass 2\", select = height, drop = TRUE )  tenor1 <- subset(singer, voice.part == \"Tenor 1\", select = height, drop = TRUE )   eda_qq(bass2, tenor1)  #> [1] \"Suggested offsets:y = x * 1.04 + (-5.2163)\"   # The function suggests an offset of the form y = x * 1.04 - 5.2  eda_qq(bass2, tenor1, fx = \"x * 1.04 - 5.2\")  #> [1] \"Suggested offsets:y = x * 1.04 + (-5.2163)\"   # The suggested offset helps align the points along the x=y line, but we  # we might come up with a better characterization of this offset.  # There seems to be an additive offset of about 2 inches. By subtracting 2  # from the x variable, we should have points line up with the x=y line  eda_qq(bass2, tenor1, fx = \"x - 2\")  #> [1] \"Suggested offsets:y = x * 1.04 + (-5.2163)\"   # We can fine-tune by generating the Tukey mean-difference plot  eda_qq(bass2, tenor1, fx = \"x - 2\", md = TRUE)  #> [1] \"Suggested offsets:y = x * 1.04 + (-5.2163)\"   # An offset of another 0.5 inches seems warranted  # We can say that overall, bass2 singers are 2.5 inches taller than  tenor1.  # The offset is additive.  eda_qq(bass2, tenor1, fx = \"x - 2.5\", md = TRUE)  #> [1] \"Suggested offsets:y = x * 1.04 + (-5.2163)\"   # Note that the \"suggested offset\" in the console could have also been  # applied to the data (though this formula is a bit more difficult to  # interpret than our simple additive model)  eda_qq(bass2, tenor1, fx = \"x * 1.04 -5.2\", md = TRUE)  #> [1] \"Suggested offsets:y = x * 1.04 + (-5.2163)\"   # Example 2: Sepal width  setosa <- subset(iris, Species == \"setosa\", select = Petal.Width, drop = TRUE)  virginica <- subset(iris, Species == \"virginica\", select = Petal.Width, drop = TRUE)   eda_qq(setosa, virginica)  #> [1] \"Suggested offsets:y = x * 1.7143 + (1.6286)\"   # The points are not completely parallel to the  x=y line suggesting a  # multiplicative offset. The slope may be difficult to eyeball. The function  # outputs a suggested slope and intercept. We can start with that  eda_qq(setosa, virginica, fx = \"x *  1.7143\")  #> [1] \"Suggested offsets:y = x * 1.7143 + (1.6286)\"   # Now let's add the suggested additive offset.  eda_qq(setosa, virginica, fx = \"x *  1.7143  + 1.6286\")  #> [1] \"Suggested offsets:y = x * 1.7143 + (1.6286)\"   # We can confirm this value via the mean-difference plot  # Overall, we have both a multiplicative and additive offset between the  # species' petal widths.  eda_qq(setosa, virginica, fx = \"x *  1.7143 + 1.6286\", md = TRUE)  #> [1] \"Suggested offsets:y = x * 1.7143 + (1.6286)\""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_qqmat.html","id":null,"dir":"Reference","previous_headings":"","what":"QQ plot matrix — eda_qqmat","title":"QQ plot matrix — eda_qqmat","text":"eda_qqmat Generates matrix empirical QQ plots","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_qqmat.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"QQ plot matrix — eda_qqmat","text":"","code":"eda_qqmat(   dat,   x,   fac,   p = 1L,   tukey = FALSE,   q.type = 5,   upper = FALSE,   xylim = NULL,   resid = FALSE,   stat = mean,   plot = TRUE,   grey = 0.6,   pch = 21,   p.col = \"grey40\",   p.fill = \"grey60\",   size = 1,   text.size = 1,   tail.pch = 21,   tail.p.col = \"grey70\",   tail.p.fill = NULL,   tic.size = 0.7,   alpha = 0.8,   q = FALSE,   tails = FALSE,   med = FALSE,   inner = 0.75,   ... )"},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_qqmat.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"QQ plot matrix — eda_qqmat","text":"dat Data frame. x Continuous variable. fac Categorical variable. p Power transformation apply continuous variable. tukey Boolean determining Tukey transformation adopted (FALSE adopts Box-Cox transformation). q.type integer 1 9 selecting one nine quantile algorithms. (See quantiletile function). upper Boolean determining upper lower triangular matrix plotted. set FALSE, lower triangular matrix plotted. xylim X Y axes limits. resid Boolean determining residuals plotted. Residuals computed using stat parameter. stat Statistic use residuals computed. Currently mean (default) median. plot Boolean determining plot generated. grey Grey level apply plot elements (0 1 1 = black). pch Point symbol type. p.col Color point symbol. p.fill Point fill color passed bg (used pch ranging 21-25). size Point symbol size (0-1). text.size Size category text diagonal box. tail.pch Tail-end point symbol type (See tails). tail.p.col Tail-end color point symbol (See tails). tail.p.fill Tail-end point fill color passed bg (used tail.pch ranging 21-25). tic.size Size tic labels (defaults 0.8). alpha Point transparency (0 = transparent, 1 = opaque). applicable rgb() used define point colors. q Boolean determining grey box highlighting inner region displayed. tails Boolean determining points outside inner region symbolized differently. Tail-end points symbolized via tail.pch, tail.p.col tail.p.fill arguments. med Boolean determining median lines drawn. inner Fraction mid-values highlight q tails. Defaults inner 75 percent values. ... used","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_qqmat.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"QQ plot matrix — eda_qqmat","text":"Returns list following components: data: List input x y values group. May interpolated smallest quantile batch batch sizes match. Values reflect power transformation defined p. p: Transformation applied original values.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_qqmat.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"QQ plot matrix — eda_qqmat","text":"function generate empirical QQ plot matrix. arguments available eda_qq echoed function. one notable difference default settings. default, eda_qqmat generate plain vanilla set plots.  QQ plot matrix effective comparing residuals data fitted mean median. plot residuals, set resid=TRUE. default, mean used. can change statistic median setting stat=median.  function also allows batch transformation values via p argument. transformation applied data prior computing residuals.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_qqmat.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"QQ plot matrix — eda_qqmat","text":"John M. Chambers, William S. Cleveland, Beat Kleiner, Paul . Tukey. Graphical Methods Data Analysis (1983) Quantile-Quantile plot article","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_qqmat.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"QQ plot matrix — eda_qqmat","text":"","code":"# Default output singer <- lattice::singer eda_qqmat(singer, height, voice.part)   # Symbolize points outside of the \"inner\" region using an open point symbol eda_qqmat(singer, height, voice.part, tails = TRUE)   # Set the inner region to cover 80% and change the outer point symbol to \"+\" eda_qqmat(singer, height, voice.part, inner = 0.8, tails = TRUE, tail.pch = 3)   # Add the upper triangle to the matrix eda_qqmat(singer, height, voice.part, upper = TRUE)   # Plot residuals after fitting mean to each batch eda_qqmat(singer, height, voice.part, resid = TRUE)   # Log transform the data, then plot the residuals after fitting the mean model eda_qqmat(iris, Petal.Length, Species, resid = TRUE, p = 0) #> Note that a power transformation of 0 was applied to the data before they were processed for the plot.   # Fit the median model instead of the mean eda_qqmat(iris, Petal.Length, Species, resid = TRUE, p = 0, stat = median) #> Note that a power transformation of 0 was applied to the data before they were processed for the plot.   # Shade the \"inner\" regions (defaults to the mid 70% of values) eda_qqmat(iris, Petal.Length, Species, resid = TRUE, q = TRUE, p = 0) #> Note that a power transformation of 0 was applied to the data before they were processed for the plot.   # Change inner region point symbols to dark orange and change inner region # range to cover 90% of mid values eda_qqmat(iris, Petal.Length, Species, resid = TRUE, p = 0, inner = 0.9,           tail.pch = 3, p.fill = \"orange2\") #> Note that a power transformation of 0 was applied to the data before they were processed for the plot."},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_qqpool.html","id":null,"dir":"Reference","previous_headings":"","what":"Multi-panel pooled values QQ plots — eda_qqpool","title":"Multi-panel pooled values QQ plots — eda_qqpool","text":"eda_qqpool generates multi-panel pooled values QQ plots continuous variable conditioned grouping variable. plot frequently used compare residuals pooled residuals.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_qqpool.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multi-panel pooled values QQ plots — eda_qqpool","text":"","code":"eda_qqpool(   dat,   x,   fac,   p = 1L,   tukey = FALSE,   q.type = 5,   resid = TRUE,   stat = mean,   show.par = FALSE,   plot = TRUE,   grey = 0.6,   pch = 21,   nrow = 1,   p.col = \"grey40\",   p.fill = \"grey60\",   size = 1,   text.size = 0.8,   tail.pch = 21,   tail.p.col = \"grey70\",   tail.p.fill = NULL,   tic.size = 0.8,   alpha = 0.8,   q = FALSE,   tails = FALSE,   med = FALSE,   inner = 0.75,   title = FALSE,   ylab = NULL,   ... )"},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_qqpool.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multi-panel pooled values QQ plots — eda_qqpool","text":"dat Data frame. x Continuous variable. fac Categorical variable. p Power transformation apply continuous variable. tukey Boolean determining Tukey transformation adopted (FALSE adopts Box-Cox transformation). q.type integer 4 9 selecting one six quantile algorithms (See eda_fval list quantile algorithms). resid Boolean determining residuals plotted. Residuals computed using stat parameter. stat Statistic use residuals computed. Currently mean (default) median. show.par Boolean determining power transformation displayed plot. plot Boolean determining plot generated. grey Grey level apply plot elements (0 1 1 = black). pch Point symbol type. nrow Define number rows panel layout. p.col Color point symbol. p.fill Point fill color passed bg (used pch ranging 21-25). size Point symbol size (0-1). text.size Size category text plot. tail.pch Tail-end point symbol type (See tails). tail.p.col Tail-end color point symbol (See tails). tail.p.fill Tail-end point fill color passed bg (used tail.pch ranging 21-25). tic.size Size tic labels (defaults 0.8). alpha Point transparency (0 = transparent, 1 = opaque). applicable rgb() used define point colors. q Boolean determining grey box highlighting inner region displayed. tails Boolean determining points outside inner region symbolized differently. Tail-end points symbolized via tail.pch, tail.p.col tail.p.fill arguments. med Boolean determining median lines drawn. inner Fraction mid-values highlight q tails. Defaults inner 75 percent values. title Title display. set TRUE, defaults \"Pooled residuals QQ plot\". set FALSE, omits title output. Custom title can also passed argument. ylab Y X axes labels. ... used","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_qqpool.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multi-panel pooled values QQ plots — eda_qqpool","text":"Returns dataframe x (residuals resid = TRUE), fac, f-value (fac group), matching pooled residuals.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_qqpool.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Multi-panel pooled values QQ plots — eda_qqpool","text":"function generate multi-panel pooled values QQ plots. function defaults pooled residuals QQ plots common use kind plot.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_qqpool.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Multi-panel pooled values QQ plots — eda_qqpool","text":"William S. Cleveland. Visualizing data. (1993)","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_qqpool.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multi-panel pooled values QQ plots — eda_qqpool","text":"","code":"# Default output singer <- lattice::singer eda_qqpool(singer, height, voice.part, nrow = 2)"},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_qqtheopan.html","id":null,"dir":"Reference","previous_headings":"","what":"Multi-panel theoretical QQ plots — eda_qqtheopan","title":"Multi-panel theoretical QQ plots — eda_qqtheopan","text":"eda_qqmulti Generates multi-panel theoretical QQ plots   continuous variable conditioned grouping variable.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_qqtheopan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multi-panel theoretical QQ plots — eda_qqtheopan","text":"","code":"eda_qqtheopan(   dat,   x,   fac,   p = 1L,   tukey = FALSE,   q.type = 5,   dist = \"norm\",   dist.l = list(),   ylim = NULL,   resid = FALSE,   stat = mean,   show.par = FALSE,   plot = TRUE,   grey = 0.6,   pch = 21,   nrow = 1,   p.col = \"grey40\",   p.fill = \"grey60\",   size = 1,   text.size = 0.8,   tail.pch = 21,   tail.p.col = \"grey70\",   tail.p.fill = NULL,   tic.size = 0.7,   alpha = 0.8,   q = FALSE,   tails = FALSE,   med = FALSE,   inner = 0.75,   iqr = TRUE,   title = FALSE,   xlab = NULL,   ylab = NULL,   ... )"},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_qqtheopan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multi-panel theoretical QQ plots — eda_qqtheopan","text":"dat Data frame. x Continuous variable. fac Categorical variable. p Power transformation apply continuous variable. tukey Boolean determining Tukey transformation adopted (FALSE adopts Box-Cox transformation). q.type integer 1 9 selecting one nine quantile algorithms (See quantile function). Used fitting line points computing boundaries shaded region. dist Theoretical distribution use. Defaults Normal distribution. dist.l List parameters passed distribution quantile function. ylim Y axes limits. resid Boolean determining residuals plotted. Residuals computed using stat parameter. stat Statistic use residuals computed. Currently mean (default) median. show.par Boolean determining power transformation displayed plot. plot Boolean determining plot generated. grey Grey level apply plot elements (0 1 1 = black). pch Point symbol type. nrow Define number rows panel layout. p.col Color point symbol. p.fill Point fill color passed bg (used pch ranging 21-25). size Point symbol size (0-1). text.size Size category text plot. tail.pch Tail-end point symbol type (See tails). tail.p.col Tail-end color point symbol (See tails). tail.p.fill Tail-end point fill color passed bg (used tail.pch ranging 21-25). tic.size Size tic labels (defaults 0.8). alpha Point transparency (0 = transparent, 1 = opaque). applicable rgb() used define point colors. q Boolean determining grey box highlighting inner region displayed. tails Boolean determining points outside inner region  symbolized differently. Tail-end points symbolized via tail.pch, tail.p.col tail.p.fill arguments. med Boolean determining median lines drawn. inner Fraction mid-values highlight q tails. Defaults inner 75% values. iqr Boolean determining IQR line fitted points. title Title display. set TRUE, defaults \"Normal QQ plot\". set FALSE, omits title output. Custom title can also passed argument. xlab X-axis label. ylab Y-axis label. ... used","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_qqtheopan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multi-panel theoretical QQ plots — eda_qqtheopan","text":"Returns list following components: data: List input x y values   group. May interpolated smallest quantile batch batch sizes   match. Values reflect power transformation defined p","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_qqtheopan.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Multi-panel theoretical QQ plots — eda_qqtheopan","text":"function generate multi-panel theoretical QQ plot.  Currently, Normal QQ plot (dist=\"norm\"), exponential  QQ plot (dist=\"exp\"), uniform QQ plot (dist=\"unif\")  supported.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_qqtheopan.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Multi-panel theoretical QQ plots — eda_qqtheopan","text":"William S. Cleveland. Visualizing data. (1993)","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_qqtheopan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multi-panel theoretical QQ plots — eda_qqtheopan","text":"","code":"# Default output singer <- lattice::singer eda_qqtheopan(singer, height, voice.part)  # Split into two rows eda_qqtheopan(singer, height, voice.part, nrow = 2, title = TRUE)  # Compare to a uniform distribution eda_qqtheopan(singer, height, voice.part, nrow = 2, dist = \"unif\")  # A uniform QQ plot is analogous to a Q(f) plot eda_qqtheopan(singer, height, voice.part, nrow = 2, dist = \"unif\",               iqr = FALSE, xlab = \"f-value\")  # Normal QQ plots of Waterville daily averages. Mean monthly values are # subtracted from the data to recenter all batches around 0.  Color and point # symbols are used to emphasize the inner core of the data (here set to the # inner 80% of values) wat <- tukeyedar::wat05 wat$month <- format(wat$date,\"%b\") eda_qqtheopan(wat,avg, month, resid = TRUE, nrow = 4, inner = 0.8 ,                     tails = TRUE, tail.pch = 3, p.fill = \"coral\")"},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_re.html","id":null,"dir":"Reference","previous_headings":"","what":"Re-expression function — eda_re","title":"Re-expression function — eda_re","text":"eda_re re-expresses vector following Tukey box-cox transformation.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_re.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Re-expression function — eda_re","text":"","code":"eda_re(x, p = 0, tukey = FALSE)"},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_re.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Re-expression function — eda_re","text":"x Vector p Power transformation tukey set TRUE, adopt Tukey's power transformation, FALSE, adopt Box-Cox transformation","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_re.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Re-expression function — eda_re","text":"Returns vector length input x","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_re.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Re-expression function — eda_re","text":"function used re-express data using one two transformation techniques: Box-Cox transformation (tukey = FALSE)Tukey's power transformation (tukey = TRUE).","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_re.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Re-expression function — eda_re","text":"","code":"x <- c(15, 28, 17, 73,  8, 83,  2) eda_re(x, p=-1/3) #> [1] 1.7835596 2.0120494 1.8332666 2.2821832 1.5000000 2.3122532 0.6188984"},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_rfs.html","id":null,"dir":"Reference","previous_headings":"","what":"Residual-Fit Spread Plot — eda_rfs","title":"Residual-Fit Spread Plot — eda_rfs","text":"eda_rfs generates Cleveland residual-fit spread plot univariate bivariate data.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_rfs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Residual-Fit Spread Plot — eda_rfs","text":"","code":"eda_rfs(   dat,   x = NULL,   grp = NULL,   p = 1L,   tukey = FALSE,   show.par = TRUE,   stat = mean,   grey = 0.7,   pch = 21,   p.col = \"grey50\",   p.fill = \"grey80\",   inner = 0.9,   q = FALSE,   size = 0.8,   alpha = 0.7,   ylim = NULL,   bar = FALSE )"},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_rfs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Residual-Fit Spread Plot — eda_rfs","text":"dat eda_lm model, lm model dataframe univariate data. x Column values dat dataframe, ignored otherwise. grp Column categorical variable dat dataframe, ignored otherwise. p Power transformation apply univariate data. Ignored linear model passed function. tukey Boolean determining Tukey transformation adopted (TRUE) Box-Cox transformation adopted (FALSE). show.par Boolean determining power transformation used data displayed plot's upper-right corner. stat Choice summary statistic use centering fitted values around 0. stat parameter also used fitting univariate values (.e. summarizing groups). stat can either mean median. grey Grey level apply plot elements (0 1 1 = black). pch Point symbol type. p.col Color point symbol. p.fill Point fill color passed bg (used pch ranging 21-25). inner Fraction values captured shaded region. Defaults inner 90 percent values. q Boolean determining grey quantile boxes plotted. size Point size (0-1) alpha Point transparency (0 = transparent, 1 = opaque). applicable rgb() used define point colors. ylim Define custom y axis limits. bar Boolean determining spread comparison stacked bars plotted.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_rfs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Residual-Fit Spread Plot — eda_rfs","text":"values returned","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_rfs.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Residual-Fit Spread Plot — eda_rfs","text":"eda_rfs function generates residual-fit spread plot univariate bivariate data. Input can dataframe one column storing continuous variable another column storing categorical (grouping) variable , bivariate dataset, model output lm(), eda_lm() eda_rline() function. stat argument applies univariate data allows user choose summary statistic fit data (either mean median). statistic also used recenter fitted values rfs plot. q argument, set TRUE, add shaded region residual quantile plot highlighting mid portion data defined inner argument (set 90 percent mid values, default). range defined mid portion data highlighted left plot comparison full range defined fitted values.  bar option, set TRUE, adds narrow stacked barplot compares spread covered residuals (red bar) spread covered fitted values (green bar). residual spread computed portion residuals defined inner argument. values outputted console used computing vertical bars. red bar relative spread residuals green bar relative spread fitted values. stacked bar plot can helpful quickly gauging effect fitted values explaining variability data. longer green bar relative red bar, greater grouping variable's (univariate data) linear model's (bivariate data) effect minimizing uncertainty estimated value.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_rfs.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Residual-Fit Spread Plot — eda_rfs","text":"William S. Cleveland. Visualizing Data. Hobart Press (1993) Residual-fit spread article","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_rfs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Residual-Fit Spread Plot — eda_rfs","text":"","code":"# Generate a basic residual-fit spread plot eda_rfs(mtcars,mpg, cyl) #> The mid 90.0% of residuals covers about 9.74 units. #> The fitted values cover a range of 11.56 units, or about 118.7% of the mid 90.0% of residuals.   # Add inner 90% region to residuals (grey boxes in plot) # Vertical grey box shows matching y-values eda_rfs(mtcars,mpg, cyl, q = TRUE) #> The mid 90.0% of residuals covers about 9.74 units. #> The fitted values cover a range of 11.56 units, or about 118.7% of the mid 90.0% of residuals.   # Change guide to encompass mid 75% of residual values eda_rfs(mtcars,mpg, cyl, q = TRUE, inner = 0.75) #> The mid 75.0% of residuals covers about 7.70 units. #> The fitted values cover a range of 11.56 units, or about 150.1% of the mid 75.0% of residuals.   # Use median instead of the mean to compute group summaries and to # recenter the fitted values around 0. eda_rfs(mtcars,mpg, cyl, stat = median) #> The mid 90.0% of residuals covers about 9.99 units. #> The fitted values cover a range of 10.80 units, or about 108.1% of the mid 90.0% of residuals.   # Apply power transformation of -1 to mpg. Defaults to box-cox method. eda_rfs(mtcars,mpg, cyl, p = -1) #> The mid 90.0% of residuals covers about 0.03 units. #> The fitted values cover a range of 0.03 units, or about 101.0% of the mid 90.0% of residuals.   # Display a stacked bar plot showing relative importance in spreads # between fitted values and residuals. eda_rfs(mtcars,mpg, cyl, bar = TRUE) #> The mid 90.0% of residuals covers about 9.74 units. #> The fitted values cover a range of 11.56 units, or about 118.7% of the mid 90.0% of residuals.   # Generate rfs plot for bivariate model output. Model can be generated from # lm(), eda_lm() or eda_rline() M1 <- lm(hp ~ mpg, mtcars) eda_rfs(M1,q =TRUE) #> The mid 90.0% of residuals covers about 112.42 units. #> The fitted values cover a range of 207.50 units, or about 184.6% of the mid 90.0% of residuals.   M2 <- eda_lm(mtcars, mpg, hp)  #>        int      mpg^1  #> 324.082314  -8.829731  eda_rfs(M2,q =TRUE) #> The mid 90.0% of residuals covers about 112.42 units. #> The fitted values cover a range of 207.50 units, or about 184.6% of the mid 90.0% of residuals.   M3 <- eda_rline(mtcars, mpg, hp) eda_rfs(M3, q =TRUE) #> The mid 90.0% of residuals covers about 122.52 units. #> The fitted values cover a range of 252.28 units, or about 205.9% of the mid 90.0% of residuals."},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_rline.html","id":null,"dir":"Reference","previous_headings":"","what":"Tukey's resistant line — eda_rline","title":"Tukey's resistant line — eda_rline","text":"eda_rline R implementation Hoaglin, Mosteller Tukey's resistant line technique outlined chapter 5 \"Understanding Robust Exploratory Data Analysis\" (Wiley, 1983).","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_rline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tukey's resistant line — eda_rline","text":"","code":"eda_rline(dat, x, y, px = 1, py = 1, tukey = FALSE, maxiter = 20)"},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_rline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tukey's resistant line — eda_rline","text":"dat Data frame. x Column assigned x axis. y Column assigned y axis. px Power transformation apply x-variable. py Power transformation apply y-variable. tukey Boolean determining Tukey transformation adopted. (FALSE adopts Box-Cox transformation) maxiter Maximum number iterations run.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_rline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tukey's resistant line — eda_rline","text":"Returns list class eda_rline following named components: : Intercept b: Slope residuals: Residuals sorted x-values x: Sorted x values y: y values following sorted x-values xmed: Median x values third ymed: Median y values third index: Index sorted x values defining upper boundaries thirds xlab: X label name ylab: Y label name iter: Number iterations fitted.values: Fitted values","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_rline.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tukey's resistant line — eda_rline","text":"R implementation RLIN.F FORTRAN code Velleman et. al's book. function fits robust line using three-point summary strategy whereby data split three equal length groups along x-axis line fitted medians defining group via iterative process. function mirror built-stat::line function fitting strategy outputs additional parameters. See accompanying resistant line article detailed breakdown resistant line technique.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_rline.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Tukey's resistant line — eda_rline","text":"Velleman, P. F., D. C. Hoaglin. 1981. Applications, Basics Computing Exploratory Data Analysis. Boston: Duxbury Press. D. C. Hoaglin, F. Mosteller, J. W. Tukey. 1983. Understanding Robust Exploratory Data Analysis. Wiley.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_rline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tukey's resistant line — eda_rline","text":"","code":"# This first example uses breast cancer data from \"ABC's of EDA\" page 127. # The output model's  parameters should closely match:  Y = -46.19 + 2.89X # The plots shows the original data with a fitted resistant line (red) # and a regular lm fitted line (dashed line), and the modeled residuals. # The 3-point summary dots are shown in red.  M <- eda_rline(neoplasms, Temp, Mortality) M #> $b #> [1] 2.890173 #>  #> $a #> [1] -46.20241 #>  #> $residuals #>  [1]  21.59489403   0.43651252  -1.88256262   9.12610790 -10.95192678 #>  [6]  -7.32013487   0.15674374   5.05558767  -8.71262042  -1.90279383 #> [11]   3.05211946  -6.97100193  -0.09412331   6.48275530   2.09373796 #> [16]   0.43651252 #>  #> $x #>  [1] 31.8 34.0 40.2 42.1 42.3 43.5 44.2 45.1 46.3 47.3 47.8 48.5 49.2 49.9 50.0 #> [16] 51.3 #>  #> $y #>  [1]  67.3  52.5  68.1  84.6  65.1  72.2  81.7  89.2  78.9  88.6  95.0  87.0 #> [13]  95.9 104.5 100.4 102.5 #>  #> $xmed #> [1] 40.2 45.7 49.9 #>  #> $ymed #> [1]  67.30  85.15 100.40 #>  #> $index #> [1]  5 11 16 #>  #> $xlab #> [1] \"Temp\" #>  #> $ylab #> [1] \"Mortality\" #>  #> $px #> [1] 1 #>  #> $py #> [1] 1 #>  #> $iter #> [1] 4 #>  #> $fitted.values #>  [1]  45.70511  52.06349  69.98256  75.47389  76.05193  79.52013  81.54326 #>  [8]  84.14441  87.61262  90.50279  91.94788  93.97100  95.99412  98.01724 #> [15]  98.30626 102.06349 #>  #> attr(,\"class\") #> [1] \"eda_rline\"  # Plot the output (red line is the resistant line) plot(M)  # Add a traditional OLS regression line (dashed line) abline(lm(Mortality ~ Temp, neoplasms), lty = 3)   # Plot the residuals plot(M, type = \"residuals\")   # This next example uses Andrew Siegel's pathological 9-point dataset to test # for model stability when convergence cannot be reached. M <- eda_rline(nine_point, X, Y) plot(M)"},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_shuffle.html","id":null,"dir":"Reference","previous_headings":"","what":"Shuffle values across groups — eda_shuffle","title":"Shuffle values across groups — eda_shuffle","text":"function shuffles values specified column data frame across groups.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_shuffle.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shuffle values across groups — eda_shuffle","text":"","code":"eda_shuffle(df, x, grp, replace_x = FALSE, replace_grp = FALSE, ...)"},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_shuffle.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shuffle values across groups — eda_shuffle","text":"df data frame. x name column containing values shuffled. grp name column containing grouping factor. replace_x logical value indicating whether sample values replacement  (default: FALSE). replace_grp logical value indicating whether preserve factor levels grouping column (default: TRUE). ... used","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_shuffle.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shuffle values across groups — eda_shuffle","text":"data frame shuffled values original group assignments. column names output data frame match input column names.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_shuffle.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Shuffle values across groups — eda_shuffle","text":"Shuffling/permuting values across groups , effect, sampling distribution within group level. simulates process differences group levels solely function random noise.  default, group distribution change. wish allow group distribution change (.e. different number group levels), set replace_grp = TRUE. , note small datasets, may result empty group levels.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_shuffle.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shuffle values across groups — eda_shuffle","text":"","code":"# Original data eda_boxls(mtcars, hp, cyl, reorder = FALSE)   # Permute values across cyl groups df1 <- eda_shuffle(mtcars, hp, cyl) eda_boxls(df1, hp, cyl)   # Is the variability explained by cyl due to chance alone or is it # systematic? OP <- par(mfrow = c(2,2))  eda_boxls(mtcars, hp, cyl, reorder = FALSE)  title(\"Original\", col.main = \"darkred\")  eda_boxls(eda_shuffle(mtcars, hp, cyl), hp, cyl, reorder = FALSE)  eda_boxls(eda_shuffle(mtcars, hp, cyl), hp, cyl, reorder = FALSE)  eda_boxls(eda_shuffle(mtcars, hp, cyl), hp, cyl, reorder = FALSE)  par(OP)"},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_sim.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate data using Fleishman transformation — eda_sim","title":"Simulate data using Fleishman transformation — eda_sim","text":"Generates random data specified skewness excess kurtosis using Fleishman transformation method.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_sim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate data using Fleishman transformation — eda_sim","text":"","code":"eda_sim(   n = 1,   skew = 0,   kurt = NULL,   check = TRUE,   coefout = FALSE,   coefin = NULL )"},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_sim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate data using Fleishman transformation — eda_sim","text":"n integer specifying number random data points generate. skew numeric value specifying desired skewness simulated data. kurt numeric value specifying desired excess kurtosis simulated data. NULL value function compute minimum kurtosis value check Boolean determining combination skewness kurtosis valid. coefout Boolean determining Fleishman coefficients outputted instead simulated values. coefin Vector four coefficients used Fleishman's equation. bypasses need solve parameters.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_sim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate data using Fleishman transformation — eda_sim","text":"numeric vector simulated data points.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_sim.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate data using Fleishman transformation — eda_sim","text":"function uses Fleishman's polynomial transformation form: $$Y = + bX + cX^2 + dX^3$$ , b, c, d coefficients determined approximate specified skewness excess kurtosis, X standard normal variable. coefficients solved using numerical optimization approach based minimizing residuals Fleishman's equations. excess kurtosis defined kurtosis Normal distribution (k=3) minus 3. References suggest function valid skewness range -3 3 excess kurtosis greater -1.13168 + 1.58837 * skew ^ 2. However, suggested cutoff  fails skewness beyond range -2,2 function's implementation Fleishman's routine. Instead, cutoff -1.13168 + 0.9 + 1.58837 * skew ^ 2 implemented .  check = TRUE, function warn user invalid combination skewness excess kurtosis passed function. kurt = NULL , function generate minimum valid excess kurtosis value given input skewness. proper combination skewness kurtosis parameters passed function, output distribution mean around 0 variance around 1. note strongly skewed distribution require large n reflect desired properties due disproportionate influence tail's extreme values various moments distribution, particularly higher-order moments like skewness kurtosis. Fleishman, . . (1978). method simulating non-normal distributions. Psychometrika, 43, 521–532. Wicklin, R. (2013). Simulating Data SAS (Appendix D: Functions Simulating Data Using Fleishman’s Transformation). Cary, NC: SAS Institute Inc. Retrieved  https://tinyurl.com/4tustnph","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_sim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate data using Fleishman transformation — eda_sim","text":"","code":"# Generate a normal distribution set.seed(321) x <- eda_sim(1000, skew = 0, kurt = 0) #> Skew/kurtosis combination is valid. eda_theo(x) # Check for normality   # Simulate distribution with skewness = 1.15 and kurtosis = 2 # A larger sample size is more likely to reflect the desired parameters set.seed(653) x <- eda_sim(500000, skew = 1.15, kurt = 2) #> Skew/kurtosis combination is valid.  # Verify skewness and excess kurtosis of the simulated data # Mean and variance should be close to 0 and 1 respectively eda_moments(x) #>             n          mean           var          skew          kurt  #>  5.000000e+05 -4.100630e-04  9.991292e-01  1.159680e+00  2.085365e+00   # Visualize the simulated data hist(x, breaks = 30, main = \"Simulated Data\", xlab = \"Value\")   # Check skewness/kurtosis output set.seed(123) skew <- kurt <- z <- vector() y <- seq(-3.5,3.5, by = 0.5) for (i in 1:length(y)){  z[i] <- -1.13168 + 0.9 + 1.58837 * y[i]^2 # Compute within range kurtosis  x <- eda_sim(199999, skew = y[i], kurt = z[i], check = FALSE)  skew[i] <- eda_moments(x)[4]  kurt[i] <- eda_moments(x)[5] }  eda_qq(y, skew)  #> [1] \"Suggested offsets:y = x * 0.9996 + (-0.0027)\" eda_qq(z,kurt)  #> [1] \"Suggested offsets:y = x * 0.9998 + (-0.0042)\""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_simdata.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate a given dataset using fleishman transformation — eda_simdata","title":"Simulate a given dataset using fleishman transformation — eda_simdata","text":"Generates simulated data mean, standard deviation, skewness, kurtosis input data.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_simdata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate a given dataset using fleishman transformation — eda_simdata","text":"","code":"eda_simdata(x, n)"},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_simdata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate a given dataset using fleishman transformation — eda_simdata","text":"x numeric vector representing dataset match moments. n integer specifying number simulated data points generate.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_simdata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate a given dataset using fleishman transformation — eda_simdata","text":"numeric vector simulated data.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_simdata.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Simulate a given dataset using fleishman transformation — eda_simdata","text":"Fleishman, . . (1978). method simulating non-normal distributions. Psychometrika, 43, 521–532. Wicklin, R. (2013). Simulating Data SAS (Appendix D: Functions Simulating Data Using Fleishman’s Transformation). Cary, NC: SAS Institute Inc. Retrieved  https://tinyurl.com/4tustnph","code":""},{"path":[]},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_simdata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate a given dataset using fleishman transformation — eda_simdata","text":"","code":"set.seed(4321) nile  <- as.vector(Nile) simnile <- eda_simdata(nile, 1000) eda_qq(nile, simnile)  #> [1] \"Suggested offsets:y = x * 1.0419 + (-36.2075)\""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_sim_defunct.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate Data with Specific Skewness and Kurtosis — eda_sim_defunct","title":"Generate Data with Specific Skewness and Kurtosis — eda_sim_defunct","text":"function generates dataset specified skewness excess kurtosis using Fleishman's polynomial transformation.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_sim_defunct.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate Data with Specific Skewness and Kurtosis — eda_sim_defunct","text":"","code":"eda_sim_defunct(n, skewness = 0, kurtosis = 0, ...)"},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_sim_defunct.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate Data with Specific Skewness and Kurtosis — eda_sim_defunct","text":"n Integer. Number data points generate. skewness Numeric. Desired skewness generated data. Default 0 (symmetric distribution). kurtosis Numeric. Desired excess kurtosis generated data. Default 0 Normal distribution. ... used.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_sim_defunct.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate Data with Specific Skewness and Kurtosis — eda_sim_defunct","text":"numeric vector length n containing generated data.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_sim_defunct.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate Data with Specific Skewness and Kurtosis — eda_sim_defunct","text":"function uses Fleishman's polynomial transformation form: $$Y = + bX + cX^2 + dX^3$$ , b, c, d coefficients determined approximate specified skewness excess kurtosis. excess kurtosis defined kurtosis Normal distribution (k=3) minus 3. Hence, excess kurtosis 0 Normal distribution. coefficients solved using numerical optimization approach based minimizing residuals Fleishman's equations. simulated values mean 0, variance can range 1 normal distributions variance greater 1 non-normal distributions.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_sim_defunct.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generate Data with Specific Skewness and Kurtosis — eda_sim_defunct","text":"Fleishman, . . (1978). method simulating non-normal distributions. Psychometrika, 43, 521–532.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_sim_defunct.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate Data with Specific Skewness and Kurtosis — eda_sim_defunct","text":"","code":"# A normal distribution  x <- eda_sim(5000, 0, 0) #> [1] \"Skew/kurtosis combination is valid.\"  hist(x)    # A right-skewed distribution  x <- eda_sim(5000, 2, 0) #> Excess kurtosis is below the recommended value of  5.2218 for a skew of  2 . #>  This may result in a distribution that does not reflect the desired  #> skewness/kurtosis combination. #> Warning:   hist(x)    # A left-skewed distribution  x <- eda_sim(5000, -2, 0) #> Excess kurtosis is below the recommended value of  5.2218 for a skew of  -2 . #>  This may result in a distribution that does not reflect the desired  #> skewness/kurtosis combination. #> Warning:   hist(x)    # A uniform distribution  # Note that this is unbounded which may result in outliers  set.seed(21)  x <- eda_sim(5000, 0, -10) #> Excess kurtosis is below the recommended value of  -1.13168 for a skew of  0 . #>  This may result in a distribution that does not reflect the desired  #> skewness/kurtosis combination. #> Warning:   hist(x, breaks = 20)    # A \"peaky\" distribution   set.seed(12)   x <- eda_sim(5000, 0, 10) #> [1] \"Skew/kurtosis combination is valid.\"   hist(x, breaks = 20)"},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_sim_old.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulate data using Fleishman transformation — eda_sim_old","title":"Simulate data using Fleishman transformation — eda_sim_old","text":"Generates random data specified skewness excess kurtosis using Fleishman transformation method.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_sim_old.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulate data using Fleishman transformation — eda_sim_old","text":"","code":"eda_sim_old(   n = 1,   skew = 0,   kurt = 0,   check = TRUE,   coefout = FALSE,   coefin = NULL )"},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_sim_old.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulate data using Fleishman transformation — eda_sim_old","text":"n integer specifying number random data points generate. skew numeric value specifying desired skewness simulated data. kurt numeric value specifying desired excess kurtosis simulated data. check Boolean determining combination skewness kurtosis valid. coefout Boolean determining Fleishman coefficients outputted instead simulated values. coefin Vector four coefficients used Fleishman's equation. bypasses need solve parameters.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_sim_old.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulate data using Fleishman transformation — eda_sim_old","text":"numeric vector simulated data points.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_sim_old.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simulate data using Fleishman transformation — eda_sim_old","text":"function uses Fleishman's polynomial transformation form: $$Y = + bX + cX^2 + dX^3$$ , b, c, d coefficients determined approximate specified skewness excess kurtosis, X standard normal variable. coefficients solved using numerical optimization approach based minimizing residuals Fleishman's equations. excess kurtosis defined kurtosis Normal distribution (k=3) minus 3. function valid skewness range -3 3 excess kurtosis greater -1.13168 + 1.58837 * skew ^ 2. check = TRUE, function warn user invalid combination skewness kurtosis passed function. Deviation recommended combination result distribution may reflect desired skewness kurtosis values. proper combination skewness kurtosis parameters passed function, output distribution mean around 0 variance around 1. note strongly skewed distribution require large n reflect desired properties due disproportionate influence tail's extreme values various moments distribution, particularly higher-order moments like skewness kurtosis. Fleishman, . . (1978). method simulating non-normal distributions. Psychometrika, 43, 521–532. Wicklin, R. (2013). Simulating Data SAS (Appendix D: Functions Simulating Data Using Fleishman’s Transformation). Cary, NC: SAS Institute Inc. Retrieved  https://tinyurl.com/4tustnph","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_sim_old.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulate data using Fleishman transformation — eda_sim_old","text":"","code":"# Generate a normal distribution set.seed(321) x <- eda_sim_old(1000, skew = 0, kurt = 0) #> Skew/kurtosis combination is valid. eda_theo(x) # Check for normality   # Simulate distribution with skewness = 1.15 and kurtosis = 2 # A larger sample size is more likely to reflect the desired parameters set.seed(653) x <- eda_sim_old(500000, skew = 1.15, kurt = 2) #> Skew/kurtosis combination is valid.  # Verify skewness and excess kurtosis of the simulated data # Mean and variance should be close to 0 and 1 respectively eda_moments(x) #>             n          mean           var          skew          kurt  #>  5.000000e+05 -4.149649e-04  9.995423e-01  1.163226e+00  2.082610e+00   # Visualize the simulated data hist(x, breaks = 30, main = \"Simulated Data\", xlab = \"Value\")"},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_sl.html","id":null,"dir":"Reference","previous_headings":"","what":"Spread-location and spread-level plots — eda_sl","title":"Spread-location and spread-level plots — eda_sl","text":"eda_sl function generates William Cleveland's spread-location plot univariate bivariate data. function also generate Tukeys' spread-level plot.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_sl.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spread-location and spread-level plots — eda_sl","text":"","code":"eda_sl(   dat,   x = NULL,   fac = NULL,   type = \"location\",   p = 1,   tukey = FALSE,   sprd = \"frth\",   jitter = 0.01,   robust = TRUE,   loess.d = list(family = \"symmetric\", degree = 1, span = 1),   loe.col = rgb(0.3, 0.3, 1, 1),   label = TRUE,   label.col = \"lightsalmon\",   plot = TRUE,   equal = TRUE,   grey = 0.6,   pch = 21,   p.col = \"grey50\",   p.fill = \"grey80\",   size = 0.8,   alpha = 0.8,   xlab = NULL,   ylab = NULL,   labelxbuff = 0.05,   labelybuff = 0.05,   show.par = TRUE )"},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_sl.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spread-location and spread-level plots — eda_sl","text":"dat Dataframe univariate data linear model. x Continuous variable column (ignored dat linear model). fac Categorical variable column (ignored dat linear model). type s-l plot type. \"location\" = spread-location, \"level\" = spread-level (univariate data). \"dependence\" = spread-dependence (bivariate model input). p Power transformation apply variable. Ignored input linear model. tukey Boolean determining Tukey transformation adopted (FALSE adopts Box-Cox transformation). sprd Choice spreads used spread-versus-level plot (.e. type = \"level\"). Either interquartile, sprd = \"IQR\" fourth-spread, sprd = \"frth\" (default). jitter Jittering parameter spread-location plot. fraction range location values. robust Boolean indicating robust regression used spread-level plot. loess.d Arguments passed internal loess function. Applies bivariate model s-l plots spread-level plot. loe.col LOESS curve color. label Boolean determining group labels added spread-location plot. label.col Color assigned group labels (applicable type = location). plot Boolean determining plot generated. equal Boolean determining axes lengths match (.e. square plot). grey Grey level apply plot elements (0 1 1 = black). pch Point symbol type. p.col Color point symbol. p.fill Point fill color passed bg (used pch ranging 21-25). size Point size (0-1). alpha Point transparency (0 = transparent, 1 = opaque). applicable rgb() used define point colors. xlab X label output plot. ylab Y label output plot. labelxbuff Buffer add edges plot make room labels spread-location plot. Value fraction plot width. labelybuff Buffer add top plot make room labels spread-location plot. Value fraction plot width. show.par Boolean determining power transformation applied data displayed.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_sl.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spread-location and spread-level plots — eda_sl","text":"Returns dataframe level spread values.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_sl.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Spread-location and spread-level plots — eda_sl","text":"function generates variations spread-location/spread-level plots depending data input type parameter passed type argument. residual spreads mapped y-axis levels mapped x-axis. values computed follows: type = \"location\" (univariate data): William Cleveland's spread-location plot applied univariate data. \\(\\ spread = \\sqrt{|residuals|}\\)  \\(\\ location = medians\\) type = \"level\" (univariate data): Tukey's spread-level plot (aka spread-versus-level plot, Hoaglin et al., p 260). pattern close linear, plot can help find power transformation help stabilize spread data subtracting one fitted slope. option outputs slope fitted line console. loess added assess linearity. default, fourth spread used define spread. Alternatively, IQR can used setting spread = \"IQR\". output nearly identical except small datasets two methods may diverge slightly output. \\(\\ spread = log(fourth\\ spread(residuals))\\)  \\(\\ location = log(medians)\\) type = \"location\" input model class lm, eda_lm eda_rline: William Cleveland's spread-location plot (aka scale-location plot) applied residuals linear model. \\(\\ spread = \\sqrt{|residuals|}\\)  \\(\\ location = fitted\\ values\\) type = \"dependence\" input model class lm, eda_lm eda_rline: William Cleveland's spread-location plot applied residuals linear model. \\(\\ spread = \\sqrt{|residuals|}\\)  \\(\\ dependence = x\\ variable\\)","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_sl.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Spread-location and spread-level plots — eda_sl","text":"Understanding Robust Exploratory Data Analysis, Hoaglin, David C., Frederick Mosteller, John W. Tukey, 1983. William S. Cleveland. Visualizing Data. Hobart Press (1993)","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_sl.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spread-location and spread-level plots — eda_sl","text":"","code":"cars <- MASS::Cars93 # Cleveland's spread-location plot applied to univariate data eda_sl(cars, MPG.city, Type)   # You can specify the exact form of the spread on the y-axis # via the ylab argument eda_sl(cars, MPG.city, Type, ylab = expression(sqrt(abs(residuals))) )   # The function can also generate Tukey's spread-level plot to identify a # power transformation that can stabilize spread across fitted values # following power = 1 - slope eda_sl(cars, MPG.city, Type, type = \"level\")  #> Slope =  3.013843  # A slope of around 3 is computed from the s-l plot, therefore, a suggested # power is 1 - 3 = -2. We can apply a power transformation within the # function via the p argument. By default, a Box-Cox transformation method # is adopted. eda_sl(cars, MPG.city, Type, p = -2)   # Spread-location plot can also be generated from residuals of a linear model M1 <- lm(mpg ~ hp, mtcars) eda_sl(M1)   # Spread can be compared to X instead of fitted value eda_sl(M1, type = \"dependence\")"},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_sym.html","id":null,"dir":"Reference","previous_headings":"","what":"Symmetry QQ plot — eda_sym","title":"Symmetry QQ plot — eda_sym","text":"eda_sym Generates symmetry QQ plot.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_sym.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Symmetry QQ plot — eda_sym","text":"","code":"eda_sym(   x,   p = 1L,   tukey = FALSE,   q.type = 5,   plot = TRUE,   show.par = TRUE,   grey = 0.6,   pch = 21,   p.col = \"grey50\",   p.fill = \"grey80\",   size = 0.8,   alpha = 0.8,   q = TRUE,   tails = FALSE,   inner = 0.75,   tail.pch = 21,   tail.p.col = \"grey70\",   tail.p.fill = NULL,   xlab = NULL,   ylab = NULL,   title = NULL,   t.size = 1.2,   ... )"},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_sym.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Symmetry QQ plot — eda_sym","text":"x Vector sample p Power transformation apply x. tukey Boolean determining Tukey transformation adopted (FALSE adopts Box-Cox transformation). q.type integer 1 9 selecting one nine quantile algorithms used generate inner shaded region. (See quantiletile function). plot Boolean determining plot generated. show.par Boolean determining power parameter displayed. grey Grey level apply plot elements (0 1 1 = black). pch Point symbol type. p.col Color point symbol. p.fill Point fill color passed bg (used pch ranging 21-25). size Point size (0-1) alpha Point transparency (0 = transparent, 1 = opaque). applicable rgb() used define point colors. q Boolean determining inner data region shaded. tails Boolean determining points outside inner region symbolized differently. Tail-end points symbolized via tail.pch,  tail.p.col tail.p.fill arguments. inner Fraction data considered \"mid values\". Defaults 75\\ tail-end points symbolized differently, tails. tail.pch Tail-end point symbol type (See tails). tail.p.col Tail-end color point symbol (See tails). tail.p.fill Tail-end point fill color passed bg (used tail.pch ranging 21-25). xlab X label output plot. Ignored x dataframe. ylab Y label output plot. Ignored x dataframe. title Title add plot. t.size Title size. ... used","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_sym.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Symmetry QQ plot — eda_sym","text":"Returns dataframe upper lower halves","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_sym.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Symmetry QQ plot — eda_sym","text":"Generates symmetry quantile plot compares lower half sorted data upper half. distribution perfectly symmetrical, points fall line.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_sym.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Symmetry QQ plot — eda_sym","text":"John M. Chambers, William S. Cleveland, Beat Kleiner, Paul . Tukey. Graphical Methods Data Analysis (1983) Symmetry quantile plot article","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_sym.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Symmetry QQ plot — eda_sym","text":"","code":"singer <- lattice::singer  tenor1 <- subset(singer, voice.part == \"Tenor 1\", select = height, drop = TRUE )   eda_sym(tenor1)"},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_theo.html","id":null,"dir":"Reference","previous_headings":"","what":"Theoretical QQ plot — eda_theo","title":"Theoretical QQ plot — eda_theo","text":"eda_theo generates theoretical QQ plot many common distributions including Normal, uniform gamma distributions.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_theo.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Theoretical QQ plot — eda_theo","text":"","code":"eda_theo(   x,   p = 1L,   tukey = FALSE,   q.type = 5,   dist = \"norm\",   dist.l = list(),   resid = FALSE,   stat = mean,   plot = TRUE,   show.par = TRUE,   grey = 0.6,   pch = 21,   p.col = \"grey50\",   p.fill = \"grey80\",   size = 1,   alpha = 0.8,   med = TRUE,   q = FALSE,   iqr = TRUE,   grid = FALSE,   tails = FALSE,   inner = 0.75,   tail.pch = 21,   tail.p.col = \"grey70\",   tail.p.fill = NULL,   xlab = NULL,   ylab = NULL,   title = NULL,   t.size = 1.2,   ... )"},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_theo.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Theoretical QQ plot — eda_theo","text":"x Vector continuous values. p Power transformation apply x. tukey Boolean determining Tukey transformation adopted (FALSE adopts Box-Cox transformation). q.type integer 4 9 selecting one nine quantile algorithms. (See eda_fval function). dist Choice theoretical distribution. dist.l List parameters passed distribution quantile function. resid Boolean determining residuals plotted. Residuals computed using stat parameter. stat Statistic use residuals computed. Currently mean (default) median. plot Boolean determining plot generated. show.par Boolean determining parameters power transformation formula displayed. grey Grey level apply plot elements (0 1 1 = black). pch Point symbol type. p.col Color point symbol. p.fill Point fill color passed bg (used pch ranging 21-25). size Point size (0-1) alpha Point transparency (0 = transparent, 1 = opaque). applicable rgb() used define point colors. med Boolean determining median lines drawn. q Boolean determining inner data region shaded. iqr Boolean determining IQR line fitted points. grid Boolean determining grid added. tails Boolean determining points outside inner region symbolized differently. Tail-end points symbolized via tail.pch,  tail.p.col tail.p.fill arguments. inner Fraction data considered \"mid values\". Defaults 75\\ tail-end points symbolized differently, tails. tail.pch Tail-end point symbol type (See tails). tail.p.col Tail-end color point symbol (See tails). tail.p.fill Tail-end point fill color passed bg (used tail.pch ranging 21-25). xlab X label output plot. ylab Y label output plot. title Title add plot. t.size Title size. ... used","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_theo.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Theoretical QQ plot — eda_theo","text":"dataframe input vector elements matching theoretical quantiles. transformation applied x reflected output.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_theo.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Theoretical QQ plot — eda_theo","text":"function generates theoretical QQ plot. Currently, Normal QQ plot (dist=\"norm\"), exponential QQ plot (dist=\"exp\"), uniform QQ plot (dist=\"unif\"), gamma QQ plot (dist=\"gamma\"), chi-squared QQ plot (dist=\"chisq\"), Weibull QQ plot (dist=\"weibull\") supported. default, Normal QQ plot maps unit Normal quantiles x-axis (.e. centered mean 0 standard deviation 1 unit).  Note arguments can passed respective quantile functions via d.list argument. quantile functions require least one argument. example, qgamma function requires shape parameter specified qchisq function requires  degrees freedom, df, specified. See examples.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_theo.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Theoretical QQ plot — eda_theo","text":"John M. Chambers, William S. Cleveland, Beat Kleiner, Paul . Tukey. Graphical Methods Data Analysis (1983) Quantile-Quantile plot article","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_theo.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Theoretical QQ plot — eda_theo","text":"","code":"singer <- lattice::singer  bass2 <- subset(singer, voice.part == \"Bass 2\", select = height, drop = TRUE )   # Generate a normal QQ plot  eda_theo(bass2)    # Generate a chi-squared QQ plot. The distribution requires that the degrees  # of freedom be specified. The inner 70% shaded region is added.  set.seed(270); x <- rchisq(100, df =3)  eda_theo(x, dist = \"chisq\", dist.l = list(df = 3), q = TRUE)    # Generate a gamma QQ plot. Note that gamma requires at the very least the  # shape parameter. The chi-squared distribution is a special case of the  # gamma distribution where shape = df/2 and rate = 1/2.  eda_theo(x, dist = \"gamma\", dist.l = list(shape = 3/2, rate = 1/2), q = TRUE)    # Generate a uniform QQ plot  eda_theo(bass2, dist = \"unif\")    # The uniform QQ plot can double as a quantile plot  eda_theo(bass2, dist = \"unif\", q = FALSE, med = FALSE,           iqr = FALSE, grid = TRUE, xlab = \"f-value\")"},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_theopan.html","id":null,"dir":"Reference","previous_headings":"","what":"Multi-panel theoretical QQ plots — eda_theopan","title":"Multi-panel theoretical QQ plots — eda_theopan","text":"eda_theopan generates multi-panel theoretical QQ plot continuous variable conditioned grouping variable.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_theopan.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Multi-panel theoretical QQ plots — eda_theopan","text":"","code":"eda_theopan(   dat,   x,   fac,   p = 1L,   tukey = FALSE,   q.type = 5,   dist = \"norm\",   dist.l = list(),   ylim = NULL,   resid = FALSE,   stat = mean,   show.par = FALSE,   plot = TRUE,   grey = 0.6,   pch = 21,   nrow = 1,   p.col = \"grey40\",   p.fill = \"grey60\",   size = 1,   text.size = 0.8,   tail.pch = 21,   tail.p.col = \"grey70\",   tail.p.fill = NULL,   tic.size = 0.7,   alpha = 0.8,   q = FALSE,   tails = FALSE,   med = FALSE,   inner = 0.75,   iqr = TRUE,   title = FALSE,   xlab = NULL,   ylab = NULL,   ... )"},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_theopan.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Multi-panel theoretical QQ plots — eda_theopan","text":"dat Data frame. x Continuous variable. fac Categorical variable. p Power transformation apply continuous variable. tukey Boolean determining Tukey transformation adopted (FALSE adopts Box-Cox transformation). q.type integer 4 9 selecting one nine quantile algorithms. (See eda_fval list quantile algorithms). dist Theoretical distribution use. Defaults Normal distribution. dist.l List parameters passed distribution quantile function. ylim Y axes limits. resid Boolean determining residuals plotted. Residuals computed using stat parameter. stat Statistic use residuals computed. Currently mean (default) median. show.par Boolean determining power transformation displayed plot. plot Boolean determining plot generated. grey Grey level apply plot elements (0 1 1 = black). pch Point symbol type. nrow Define number rows panel layout. p.col Color point symbol. p.fill Point fill color passed bg (used pch ranging 21-25). size Point symbol size (0-1). text.size Size category text plot. tail.pch Tail-end point symbol type (See tails). tail.p.col Tail-end color point symbol (See tails). tail.p.fill Tail-end point fill color passed bg (used tail.pch ranging 21-25). tic.size Size tic labels (defaults 0.8). alpha Point transparency (0 = transparent, 1 = opaque). applicable rgb() used define point colors. q Boolean determining grey box highlighting inner region displayed. tails Boolean determining points outside inner region symbolized differently. Tail-end points symbolized via tail.pch, tail.p.col tail.p.fill arguments. med Boolean determining median lines drawn. inner Fraction mid-values highlight q tails. Defaults inner 75 percent values. iqr Boolean determining IQR line fitted points. title Title display. set TRUE, defaults theoretical distribution type. set FALSE, omits title output. Custom title can also passed argument. xlab X-axis label. ylab Y-axis label. ... used","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_theopan.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Multi-panel theoretical QQ plots — eda_theopan","text":"Returns list following components: data: List input x y values group. May interpolated smallest quantile batch batch sizes match. Values reflect power transformation defined p .","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_theopan.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Multi-panel theoretical QQ plots — eda_theopan","text":"function generate multi-panel theoretical QQ plot. Currently, Normal QQ plot (dist=\"norm\"), exponential QQ plot (dist=\"exp\"), uniform QQ plot (dist=\"unif\"), gamma QQ plot (dist=\"gamma\"), chi-squared QQ plot (dist=\"chisq\"), Weibull QQ plot (dist=\"weibull\") currently supported. default, Normal QQ plot maps unit Normal quantiles x-axis (.e. centered mean 0 standard deviation 1 unit).","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_theopan.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Multi-panel theoretical QQ plots — eda_theopan","text":"William S. Cleveland. Visualizing data. (1993)","code":""},{"path":[]},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_theopan.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Multi-panel theoretical QQ plots — eda_theopan","text":"","code":"# Default output singer <- lattice::singer eda_theopan(singer, height, voice.part)   # Split into two rows eda_theopan(singer, height, voice.part, nrow = 2, title = TRUE)   # Compare to a uniform distribution eda_theopan(singer, height, voice.part, nrow = 2, dist = \"unif\")   # A uniform QQ plot is analogous to a Q(f) plot eda_theopan(singer, height, voice.part, nrow = 2, dist = \"unif\",               iqr = FALSE, xlab = \"f-value\")   # Normal QQ plots of Waterville daily averages. Mean monthly values are # subtracted from the data to recenter all batches around 0.  Color and point # symbols are used to emphasize the inner core of the data (here set to the # inner 80% of values) wat <- tukeyedar::wat05 wat$month <- factor(format(wat$date,\"%b\"), levels = month.abb) eda_theopan(wat,avg, month, resid = TRUE, nrow = 3, inner = 0.8 ,                     tails = TRUE, tail.pch = 3, p.fill = \"coral\")"},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_trim.html","id":null,"dir":"Reference","previous_headings":"","what":"Trims vector and dataframe objects — eda_trim","title":"Trims vector and dataframe objects — eda_trim","text":"Removes records either tail-ends sorted dataset. Trimming can performed number records (specify num = option) quantiles (specify prop= option). eda_trim Trims vector eda_trim_df Trims data frame eda_ltrim Left-trims vector eda_rtrim Right-trims vector eda_ltrim_df Left-trims dataframe eda_rtrim_df Right-trims dataframe","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_trim.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Trims vector and dataframe objects — eda_trim","text":"","code":"eda_trim(x, prop = 0.05, num = 0)  eda_trim_df(dat, x, prop = 0.05, num = 0)  eda_ltrim(x, prop = 0.05, num = 0)  eda_ltrim_df(dat, x, prop = 0.05, num = 0)  eda_rtrim(x, prop = 0.05, num = 0)  eda_rtrim_df(dat, x, prop = 0.05, num = 0)"},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_trim.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Trims vector and dataframe objects — eda_trim","text":"x Vector values (trimming vector) column whose values used trim dataframe (applies *_df functions ) prop Fraction values trim num Number values trim dat Dataframe (applies *_df functions )","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_trim.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Trims vector and dataframe objects — eda_trim","text":"Returns data type input (.e. vector dataframe)","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_trim.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Trims vector and dataframe objects — eda_trim","text":"input dataset need sorted (sorting performed functions). num set zero, function assume trimming done fraction (defined prop parameter). eda_trim eda_trim_df functions called, num prop values apply tail. example, num = 5 5 smallest 5 largest values removed data. NA values must stripped input vector column elements running trim functions. Elements returned sorted trimmed elements.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_trim.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Trims vector and dataframe objects — eda_trim","text":"","code":"# Trim a vector by 10% (i.e. 10% of the smallest and 10% of the largest # values) eda_trim( mtcars[,1], prop=0.1) #>  [1] 14.7 15.0 15.2 15.2 15.5 15.8 16.4 17.3 17.8 18.1 18.7 19.2 19.2 19.7 21.0 #> [16] 21.0 21.4 21.4 21.5 22.8 22.8 24.4 26.0 27.3  # Trim a data frame by 10% using the mpg column(i.e. 10% of the smallest # and 10% of the largest mpg values) eda_trim_df( mtcars, mpg, prop=0.1) #>                    mpg cyl  disp  hp drat    wt  qsec vs am gear carb #> Chrysler Imperial 14.7   8 440.0 230 3.23 5.345 17.42  0  0    3    4 #> Maserati Bora     15.0   8 301.0 335 3.54 3.570 14.60  0  1    5    8 #> Merc 450SLC       15.2   8 275.8 180 3.07 3.780 18.00  0  0    3    3 #> AMC Javelin       15.2   8 304.0 150 3.15 3.435 17.30  0  0    3    2 #> Dodge Challenger  15.5   8 318.0 150 2.76 3.520 16.87  0  0    3    2 #> Ford Pantera L    15.8   8 351.0 264 4.22 3.170 14.50  0  1    5    4 #> Merc 450SE        16.4   8 275.8 180 3.07 4.070 17.40  0  0    3    3 #> Merc 450SL        17.3   8 275.8 180 3.07 3.730 17.60  0  0    3    3 #> Merc 280C         17.8   6 167.6 123 3.92 3.440 18.90  1  0    4    4 #> Valiant           18.1   6 225.0 105 2.76 3.460 20.22  1  0    3    1 #> Hornet Sportabout 18.7   8 360.0 175 3.15 3.440 17.02  0  0    3    2 #> Merc 280          19.2   6 167.6 123 3.92 3.440 18.30  1  0    4    4 #> Pontiac Firebird  19.2   8 400.0 175 3.08 3.845 17.05  0  0    3    2 #> Ferrari Dino      19.7   6 145.0 175 3.62 2.770 15.50  0  1    5    6 #> Mazda RX4         21.0   6 160.0 110 3.90 2.620 16.46  0  1    4    4 #> Mazda RX4 Wag     21.0   6 160.0 110 3.90 2.875 17.02  0  1    4    4 #> Hornet 4 Drive    21.4   6 258.0 110 3.08 3.215 19.44  1  0    3    1 #> Volvo 142E        21.4   4 121.0 109 4.11 2.780 18.60  1  1    4    2 #> Toyota Corona     21.5   4 120.1  97 3.70 2.465 20.01  1  0    3    1 #> Datsun 710        22.8   4 108.0  93 3.85 2.320 18.61  1  1    4    1 #> Merc 230          22.8   4 140.8  95 3.92 3.150 22.90  1  0    4    2 #> Merc 240D         24.4   4 146.7  62 3.69 3.190 20.00  1  0    4    2 #> Porsche 914-2     26.0   4 120.3  91 4.43 2.140 16.70  0  1    5    2 #> Fiat X1-9         27.3   4  79.0  66 4.08 1.935 18.90  1  1    4    1"},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_unipow.html","id":null,"dir":"Reference","previous_headings":"","what":"Ladder of powers transformation on a single vector — eda_unipow","title":"Ladder of powers transformation on a single vector — eda_unipow","text":"eda_unipow re-expresses vector ladder powers plots results using histogram density function. Either Tukey Box-Cox transformation used computing re-expressed values.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_unipow.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ladder of powers transformation on a single vector — eda_unipow","text":"","code":"eda_unipow(   x,   p = c(2, 1, 1/2, 0.33, 0, -0.33, -1/2, -1, -2),   tukey = FALSE,   bins = 5,   cex.main = 1.3,   col = \"#DDDDDD\",   border = \"#AAAAAA\",   title = \"Re-expressed data via ladder of powers\",   ... )"},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_unipow.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ladder of powers transformation on a single vector — eda_unipow","text":"x Vector p Vector powers tukey TRUE, apply Tukey's power transformation. FALSE adopt Box-Cox transformation bins Number histogram bins cex.main Histogram title size (assigned histogram plot) col Histogram fill color border Histogram border color title Overall plot title (set NULL title) ... parameters passed graphics::hist function.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_unipow.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ladder of powers transformation on a single vector — eda_unipow","text":"return value","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_unipow.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Ladder of powers transformation on a single vector — eda_unipow","text":"output lattice descriptive plots showing transformed data across different powers.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_unipow.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Ladder of powers transformation on a single vector — eda_unipow","text":"Tukey, John W. 1977. Exploratory Data Analysis. Addison-Wesley.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_unipow.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ladder of powers transformation on a single vector — eda_unipow","text":"","code":"data(mtcars) eda_unipow(mtcars$mpg, bins=6, tukey = TRUE)"},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_untie.html","id":null,"dir":"Reference","previous_headings":"","what":"Resolve ties in a numeric vector — eda_untie","title":"Resolve ties in a numeric vector — eda_untie","text":"Adjusts tied values numeric vector adding subtracting small fraction range.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_untie.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Resolve ties in a numeric vector — eda_untie","text":"","code":"eda_untie(dat, x = NULL, fac = NULL, f = 0.01, rand = TRUE, ...)"},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_untie.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Resolve ties in a numeric vector — eda_untie","text":"dat data frame numeric vector. x Numeric column. Ignored dat numeric vector. fac Column categorical values. Ignored dat numeric vector. f numeric value specifying fraction range x use perturbing tied values. Must 0 1. rand logical value. FALSE, adjustments fixed size based f. TRUE, adjustments randomized within range specified f. ... used.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_untie.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Resolve ties in a numeric vector — eda_untie","text":"Returns input numeric data ties resolved. dat vector, modified vector returned. dat data frame, modified vector corresponding column specified x returned.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_untie.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Resolve ties in a numeric vector — eda_untie","text":"function identifies tied values input vector x perturbs slightly break ties. rand = TRUE, adjustment tied value randomized uniformly lower upper bounds defined [0, f * diff(range(x))]. rand = FALSE, adjustment deterministic equal +/- f * diff(range(x)). Alternating signs (-1 1) used distribute adjustments symmetrically. deterministic approach may eliminate ties. example, four values tied, output split values two tied values. Repeating process output needed eliminate remaining ties.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_untie.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Resolve ties in a numeric vector — eda_untie","text":"","code":"set.seed(42) x <- c(1, 2, 2, 2, 3, 4, 4, 5) # Randomized adjustments x1 <- eda_untie(x, f = 0.01, rand = TRUE) #> [1] \"There were 5 input ties.\" x1 #> [1] 1.000000 1.963408 2.037483 1.988554 3.000000 4.033218 3.974330 5.000000  # Deterministic adjustments. Given that there are three elements sharing the # same value (a value of 2 in this example), the data will need to be # processed twice. x2 <- eda_untie(x, f = 0.01, rand = FALSE) #> [1] \"There were 5 input ties.\" x2 #> [1] 1.00 1.96 2.04 1.96 3.00 4.04 3.96 5.00 x3 <- eda_untie(x2, f = 0.01, rand = FALSE) #> [1] \"There were 2 input ties.\" x3 #> [1] 1.00 1.92 2.04 2.00 3.00 4.04 3.96 5.00  # Random adjustments. Add up to +/- 0.5 inches to singer height values set.seed(17) singer <- lattice::singer factor <- 0.5 / diff(range(singer$height)) # Get fraction that covers 0.5 inches eda_jitter(singer, height, voice.part)  singer$notie <- eda_untie(singer, height, voice.part, f = factor) #> [1] \"Bass 2 had 23 ties.\" #> [1] \"Bass 1 had 38 ties.\" #> [1] \"Tenor 2 had 18 ties.\" #> [1] \"Tenor 1 had 16 ties.\" #> [1] \"Alto 2 had 26 ties.\" #> [1] \"Alto 1 had 31 ties.\" #> [1] \"Soprano 2 had 28 ties.\" #> [1] \"Soprano 1 had 32 ties.\" eda_jitter(singer, notie, voice.part)"},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_viol.html","id":null,"dir":"Reference","previous_headings":"","what":"Violin plot. — eda_viol","title":"Violin plot. — eda_viol","text":"eda_viol generates violin plot.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_viol.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Violin plot. — eda_viol","text":"","code":"eda_viol(   dat,   x = NULL,   grp = NULL,   p = 1,   tukey = FALSE,   show.par = TRUE,   sq = FALSE,   inner = 0.6826,   bw = \"SJ-dpi\",   kernel = \"gaussian\",   stat = \"both\",   pch = 16,   size = 0.8,   alpha = 0.3,   p.col = \"grey50\",   p.fill = \"grey80\",   grey = 0.6,   col.ends = \"grey90\",   col.mid = \"#EBC89B\",   col.ends.dens = \"grey90\",   col.mid.dens = \"#EBC89B\",   offset = 0.02,   tsize = 1.5,   reorder = FALSE,   reorder.stat = median,   xlab = NULL,   ylab = NULL,   ... )"},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_viol.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Violin plot. — eda_viol","text":"dat Single continuous variable vector, dataframe. x Continuous variable dat dataframe, ignored otherwise. grp Categorical Variable dat dataframe, ignored otherwise. p Power transformation apply values. tukey Boolean determining Tukey transformation adopted (TRUE) Box-Cox transformation adopted (FALSE). show.par Boolean determining power transformation used data displayed plot's upper-right corner. sq Boolean determining plot square. inner Fraction values captured inner color band normal density plots. Defaults 0.6826 (inner 68\\ values). bw Bandwidth parameter passed density() function. kernel Kernel parameter passed density() function. stat Statistical summary display plot. Choice \"median\", \"mean\", \"\" \"none\". Defaults . pch Point symbol type. size Point size. alpha Fill transparency (0 = transparent, 1 = opaque). applicable rgb() used define fill colors. p.col Color point symbol. p.fill Point fill color passed bg (used pch ranging 21-25). grey Grey level apply plot elements axes, labels, etc... (0 1 1 = black). col.ends Fill color tail-ends distribution. col.mid Fill color mid-portion distribution. col.ends.dens Fill color tail-ends density distribution. col.mid.dens Fill color mid-portion density distribution. offset value (x-axis units) defines gap left right side plots. Ignored dens FALSE. tsize Size plot title. reorder Boolean determining factors reordered based reoder.stat. reorder.stat Choice summary statistic use reordering plots. reorder.stat can either mean median. xlab X variable label. ylab Y variable label. ... Note used.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_viol.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Violin plot. — eda_viol","text":"return value.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_viol.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Violin plot. — eda_viol","text":"function generate violin plot data.  implements stats::density function generating shape plots. bw kernel arguments passed stats::density function. plots two fill colors: one inner band outer band. inner band shows area curve encompasses desired fraction mid-values defined inner. default, value 0.6826, 68.26\\ covered +/- 1 standard deviations Normal distribution). range computed actual values fitted normal distribution.  Measures centrality added plot. default, mean (dashed line) median (solid line) added plot.","code":""},{"path":[]},{"path":"https://mgimond.github.io/tukeyedar/reference/eda_viol.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Violin plot. — eda_viol","text":"","code":"# Explore a skewed distribution set.seed(132) x <- rnbinom(500, 10, .5)  # Generate violin plot eda_viol(x)   # The inner band's range can be modified. Here, we view the interquartile # range, the +/- 1 standard deviation range and the inner 95% range) OP <- par(mfrow = c(1,3)) invisible(sapply(c(0.5, 0.6826, 0.95),       function(prop) eda_viol(x, inner = prop, tsize = 1,                                  ylab = paste(prop*100,\"% of values\"))))  par(OP)  # The bandwidth selector can also be specified OP <- par(mfrow=c(2,3))  invisible(sapply(c(\"SJ-dpi\", \"nrd0\", \"nrd\", \"SJ-ste\", \"bcv\", \"ucv\" ),        function(band) eda_viol(x, bw = band, tsize=0.9, size=0, offset=0.005,                                   ylab = band)))  par(OP)  # The bandwidth argument can also be passed a numeric value # (bw = 0.75, 0.5 and 0.3) OP <- par(mfrow=c(1,3)) invisible(sapply(c(0.75, 0.5, 0.3 ),        function(band) eda_viol(x, bw = band, tsize=1,size=.5, offset=0.01,                                   ylab = band)))  par(OP)  # Examples of a few kernel options OP <- par(mfrow=c(1,3)) invisible(sapply(c(\"gaussian\", \"optcosine\", \"rectangular\" ),       function(k) eda_viol(x, kernel = k, tsize=1, size=.5, offset=0.01,                                ylab = k)))  par(OP)  # Another example where data are passed as a dataframe set.seed(540) dat <- data.frame(value = rbeta(20, 1, 50),                  grp = sample(letters[1:3], 100, replace = TRUE)) eda_viol(dat, value, grp)   # Points can be removed and the gap rendered narrower eda_viol(dat, value, grp, size = 0, offset = 0.01)   # Gap can be removed all together eda_viol(dat, value, grp, size = 0, offset = 0)   # Remove both mean and medians eda_viol(dat, value, grp, size = 0, offset = 0, stat = \"none\")   # Color can be modified. Here we modify the density plot  fill colors eda_viol(dat, value, grp, size = 0, offset = 0.01,             col.ends.dens = \"#A1D99B\", col.mid.dens = \"#E5F5E0\")   # A power transformation can be applied to the data. Here # we'll apply a log transformation eda_viol(dat, value, grp, p = 0)"},{"path":"https://mgimond.github.io/tukeyedar/reference/incrent22.html","id":null,"dir":"Reference","previous_headings":"","what":"American Community Survey 2022 Median household income and median rent by county — incrent22","title":"American Community Survey 2022 Median household income and median rent by county — incrent22","text":"American Community Survey 2022 Median Household Income (B19013001) Median Gross Rent (B25064001) county.  Units 2022 inflation-Adjusted Dollars.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/incrent22.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"American Community Survey 2022 Median household income and median rent by county — incrent22","text":"","code":"incrent22"},{"path":"https://mgimond.github.io/tukeyedar/reference/incrent22.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"American Community Survey 2022 Median household income and median rent by county — incrent22","text":"data frame 3222 rows 5 variables: FIPS County/state FIPS code. County County name State State name. Income Median Household Income 2022 US Dollars. Rent Median Gross Rent 2022 US Dollars.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/incrent22.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"American Community Survey 2022 Median household income and median rent by county — incrent22","text":"https://www.census.gov/","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/neoplasms.html","id":null,"dir":"Reference","previous_headings":"","what":"Breast cancer mortality vs. temperature — neoplasms","title":"Breast cancer mortality vs. temperature — neoplasms","text":"data represent relationship mean annual temperature breast cancer mortality rate.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/neoplasms.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Breast cancer mortality vs. temperature — neoplasms","text":"","code":"neoplasms"},{"path":"https://mgimond.github.io/tukeyedar/reference/neoplasms.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Breast cancer mortality vs. temperature — neoplasms","text":"data frame 16 rows 2 variables: Temp Temperature degrees Fahrenheit. Mortality Mortality rate presented index.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/neoplasms.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Breast cancer mortality vs. temperature — neoplasms","text":"Applications, Basics Computing Exploratory Data Analysis, P.F. Velleman D.C. Hoaglin, 1981. (page 127)","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/nine_point.html","id":null,"dir":"Reference","previous_headings":"","what":"Andrew Siegel's pathological 9-point dataset — nine_point","title":"Andrew Siegel's pathological 9-point dataset — nine_point","text":"synthetic dataset created test robustness fitted lines. Originally published Andrew Siegel later adapted Hoaglin et al.'s book.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/nine_point.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Andrew Siegel's pathological 9-point dataset — nine_point","text":"","code":"nine_point"},{"path":"https://mgimond.github.io/tukeyedar/reference/nine_point.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Andrew Siegel's pathological 9-point dataset — nine_point","text":"data frame 9 rows 2 variables: X X values Y Y values","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/nine_point.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Andrew Siegel's pathological 9-point dataset — nine_point","text":"Robust regression using repeated medians, Andrew F. Siegel, Biometrika, vol 69, n 1, 1982. Understanding robust exploratory data analysis, D.C. Hoaglin, F. Mosteller J.W. Tukey. 1983 (page 139)","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/plot.eda_lm.html","id":null,"dir":"Reference","previous_headings":"","what":"Residuals plot — plot.eda_lm","title":"Residuals plot — plot.eda_lm","text":"Generate residuals vs fitted residuals vs dependence plot eda_lm class object","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/plot.eda_lm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Residuals plot — plot.eda_lm","text":"","code":"# S3 method for class 'eda_lm' plot(   x,   type = \"rd\",   xlab = NULL,   ylab = NULL,   grey = 0.7,   pch = 21,   equal = TRUE,   p.col = \"grey50\",   alpha = 0.7,   p.fill = \"grey80\",   size = 0.8,   loess = TRUE,   loe.col = rgb(0.3, 0.3, 1, 1),   loess.d = list(family = \"symmetric\", span = 0.7, degree = 1),   ... )"},{"path":"https://mgimond.github.io/tukeyedar/reference/plot.eda_lm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Residuals plot — plot.eda_lm","text":"x Object class eda_lm. type Type residuals plot. Choice residuals-fit (rf) residuals-dependence (rd) plots. xlab X label output plot. ylab Y label output plot. grey Grey level apply plot elements (0 1 1 = black). pch Point symbol type. equal Boolean determining axes lengths match (.e. square plot). p.col Color point symbol. alpha Point transparency (0 = transparent, 1 = opaque). applicable rgb() used define point colors. p.fill Point fill color passed bg (used pch ranging 21-25). size Point size (0-1). loess Boolean indicating loess fitted plot. function. robust loess used default. loe.col LOESS curve color. loess.d list arguments passed loess.smooth function. robust loess used default. ... Note used.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/plot.eda_lm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Residuals plot — plot.eda_lm","text":"return value.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/plot.eda_lm.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Residuals plot — plot.eda_lm","text":"function generates scatter plot residuals vs dependence residuals vs fitted values plot model class eda_lm. loess line fitted data. default, robust loess adopted \"symmetric\" family.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/plot.eda_lm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Residuals plot — plot.eda_lm","text":"","code":"M1  <- eda_lm(age_height, Months, Height)  #>        int   Months^1  #> 79.6962314  0.5112868  plot(M1) # Residual-dependence plot  plot(M1, type = \"rf\") # Residual-fit plot"},{"path":"https://mgimond.github.io/tukeyedar/reference/plot.eda_polish.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot eda_polish tables or diagnostic plots — plot.eda_polish","title":"Plot eda_polish tables or diagnostic plots — plot.eda_polish","text":"plot.eda_pol plot method lists eda_polish class.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/plot.eda_polish.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot eda_polish tables or diagnostic plots — plot.eda_polish","text":"","code":"# S3 method for class 'eda_polish' plot(   x,   type = \"residuals\",   add.cv = FALSE,   k = NULL,   col.quant = FALSE,   colpal = \"RdYlBu\",   colrev = TRUE,   col.eff = TRUE,   col.com = TRUE,   adj.mar = TRUE,   res.size = 1,   row.size = 1,   col.size = 1,   res.txt = TRUE,   label.txt = TRUE,   grey = 0.6,   pch = 21,   p.col = \"grey30\",   p.fill = \"grey60\",   size = 0.9,   alpha = 0.8,   ... )"},{"path":"https://mgimond.github.io/tukeyedar/reference/plot.eda_polish.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot eda_polish tables or diagnostic plots — plot.eda_polish","text":"x list class eda_polish. type Plot type. One three: \"residuals\", \"cv\" \"diagnostic\". add.cv Whether add kCV model plotting \"residuals\". k Custom k use kCV added model. value NULL makes us slope. col.quant Boolean indicating quantile classification scheme used. colpal Color palette adopt (one listed hcl.pals()). colrev color palette reversed? (default TRUE). col.eff Boolean indicating effects common value contribute color gradient. col.com Boolean indicating common value contribute color gradient. adj.mar Boolean indicating margin width needs accommodate labels. res.size Size residual values plot [0-1]. row.size Size row effect values plot [0-1]. col.size Size column effect values plot [0-1]. res.txt Boolean indicating values added plot. label.txt Boolean indicating margin column labels plotted. grey Grey level apply plot elements diagnostic plot (0 1 1 = black). pch Point symbol type diagnostic plot. p.col Color point symbol diagnostic plot. p.fill Point fill color passed bg (used pch ranging 21-25). size Point size (0-1) diagnostic plot. alpha Point transparency (0 = transparent, 1 = opaque). applicable rgb() used define point colors. ... Arguments passed subsequent methods.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/plot.eda_polish.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot eda_polish tables or diagnostic plots — plot.eda_polish","text":"Returns single element vector \"type\" \"diagnostic\" value otherwise.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/plot.eda_polish.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot eda_polish tables or diagnostic plots — plot.eda_polish","text":"function plots polish table residuals CV values. also generate diagnostic plot type set diagnostic","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/plot.eda_polish.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot eda_polish tables or diagnostic plots — plot.eda_polish","text":"","code":"# Create dataset df <- data.frame(region =  rep( c(\"NE\", \"NC\", \"S\", \"W\"), each = 5), edu = rep( c(\"ed8\", \"ed9to11\", \"ed12\", \"ed13to15\", \"ed16\"), 4), perc = c(25.3, 25.3, 18.2, 18.3, 16.3, 32.1, 29, 18.8,         24.3, 19, 38.8, 31, 19.3, 15.7, 16.8, 25.4, 21.1, 20.3, 24, 17.5))  # Generate median polish output out <- eda_pol(df, row = region, col = edu, val = perc, plot = FALSE)  # Plot table plot(out, type = \"residuals\")    # Plot table using CV values plot(out, type = \"cv\")   # Generate diagnostic plot plot(out, type = \"diagnostic\")  #> $slope #>     cv  #> 1.3688  #>"},{"path":"https://mgimond.github.io/tukeyedar/reference/plot.eda_rline.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot eda_rline model — plot.eda_rline","title":"Plot eda_rline model — plot.eda_rline","text":"plot method lists eda_rline class.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/plot.eda_rline.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot eda_rline model — plot.eda_rline","text":"","code":"# S3 method for class 'eda_rline' plot(   x,   type = \"model\",   xlab = NULL,   ylab = NULL,   grey = 0.7,   pch = 21,   equal = TRUE,   p.col = \"grey50\",   p.fill = \"grey80\",   size = 0.8,   alpha = 0.7,   model = TRUE,   pt3 = TRUE,   fit = TRUE,   ... )"},{"path":"https://mgimond.github.io/tukeyedar/reference/plot.eda_rline.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot eda_rline model — plot.eda_rline","text":"x Object class eda_rline. type Plot type. One two: \"model\", \"residuals\". xlab Custom x-axis label. Defaults column name. ylab Custom y-axis label. Defaults column name. grey Grey level apply plot elements (0 1 1 = black). pch Point symbol type. equal Boolean determining axes lengths match (.e. square plot). p.col Color point symbol. p.fill Point fill color passed bg (used pch ranging 21-25). size Point size (0-1). alpha Point transparency (0 = transparent, 1 = opaque). applicable rgb() used define point colors. model Boolean indicating resulting model added plot. applies type = \"model\". pt3 Boolean indicating 3-pt summaries added plot. applies type = \"model\". fit Boolean indicating fitted line added plot. ... Arguments passed subsequent methods.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/plot.eda_rline.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot eda_rline model — plot.eda_rline","text":"return value.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/plot.eda_rline.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Plot eda_rline model — plot.eda_rline","text":"function generates scatter plot fitted model eda_rline object.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/plot.eda_rline.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot eda_rline model — plot.eda_rline","text":"","code":"r.lm <- eda_rline(age_height, Months, Height)  plot(r.lm)  plot(r.lm, pt3 = FALSE)  plot(r.lm, type = \"residuals\")"},{"path":"https://mgimond.github.io/tukeyedar/reference/tukeyedar-package.html","id":null,"dir":"Reference","previous_headings":"","what":"tukeyedar: Tukey Inspired Exploratory Data Analysis Functions — tukeyedar-package","title":"tukeyedar: Tukey Inspired Exploratory Data Analysis Functions — tukeyedar-package","text":"set Tukey inspired functions use exploring datasets robust manner. packages hosts small set Tukey inspired functions use exploring datasets robust manner.","code":""},{"path":[]},{"path":"https://mgimond.github.io/tukeyedar/reference/tukeyedar-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"tukeyedar: Tukey Inspired Exploratory Data Analysis Functions — tukeyedar-package","text":"Maintainer: Manuel Gimond mgimond@gmail.com (ORCID)","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/tukeyedar.html","id":null,"dir":"Reference","previous_headings":"","what":"Tukey inspired exploratory data analysis functions — tukeyedar","title":"Tukey inspired exploratory data analysis functions — tukeyedar","text":"packages hosts small set Tukey inspired functions use exploring datasets robust manner.","code":""},{"path":[]},{"path":"https://mgimond.github.io/tukeyedar/reference/tukeyedar.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Tukey inspired exploratory data analysis functions — tukeyedar","text":"Maintainer: Manuel Gimond mgimond@gmail.com (ORCID)","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/wat05.html","id":null,"dir":"Reference","previous_headings":"","what":"Temperature normals for Waterville Maine (1991-2020) — wat05","title":"Temperature normals for Waterville Maine (1991-2020) — wat05","text":"NOAA/NCEI derived normal daily temperatures city Waterville, Maine (USA) 1991 2020 period. Units degrees Fahrenheit.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/wat05.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Temperature normals for Waterville Maine (1991-2020) — wat05","text":"","code":"wat05"},{"path":"https://mgimond.github.io/tukeyedar/reference/wat05.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Temperature normals for Waterville Maine (1991-2020) — wat05","text":"data frame 365 rows 5 variables: date Date centered 11991-2020 period. Note year purely symbolic. doy Day year. min Typical minimum temperature 1991-2020 period. avg Typical average temperature 1991-2020 period. max Typical maximum temperature 1991-2020 period.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/wat05.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Temperature normals for Waterville Maine (1991-2020) — wat05","text":"https://www.ncei.noaa.gov/","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/wat95.html","id":null,"dir":"Reference","previous_headings":"","what":"Legacy temperature normals for Waterville Maine (1981-2010) — wat95","title":"Legacy temperature normals for Waterville Maine (1981-2010) — wat95","text":"NOAA/NCEI derived normal daily temperatures city Waterville, Maine (USA) 1981 2010 period. Units degrees Fahrenheit.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/wat95.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Legacy temperature normals for Waterville Maine (1981-2010) — wat95","text":"","code":"wat95"},{"path":"https://mgimond.github.io/tukeyedar/reference/wat95.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Legacy temperature normals for Waterville Maine (1981-2010) — wat95","text":"data frame 365 rows 5 variables: date Date centered 1981-2010 period. Note year purely symbolic. doy Day year min Typical minimum temperature 1981-2010 period. avg Typical average temperature 1981-2010 period. max Typical maximum temperature 1981-2010 period.","code":""},{"path":"https://mgimond.github.io/tukeyedar/reference/wat95.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Legacy temperature normals for Waterville Maine (1981-2010) — wat95","text":"https://www.ncei.noaa.gov/","code":""},{"path":"https://mgimond.github.io/tukeyedar/news/index.html","id":"tukeyedar-040","dir":"Changelog","previous_headings":"","what":"tukeyedar 0.4.0","title":"tukeyedar 0.4.0","text":"Took normal symmetry options eda_qq created functions: eda_qqsym eda_theo. latter allows theoretical distributions Normal. Added eda_fval function generates f-values (probabilities) based one six algorithms Added eda_theopan function generates multi-panel theoretical QQ plots. Added eda_qqpool function generates multi-panel pooled residual plots. Added eda_shuffle function permutes values across groups. Added eda_sim function simulates distributions given kurtosis skewness. eda_sl now outputs Cleveland’s spread-location plot well Tukey’s spread-versus-level plot. Added eda_untie function splits ties vector nudging small amount. Fixed bug eda_rline incorrect residuals returned. Fixed margin width eda_jitter eda_boxls plots horizontal mode.","code":""},{"path":"https://mgimond.github.io/tukeyedar/news/index.html","id":"tukeyedar-030","dir":"Changelog","previous_headings":"","what":"tukeyedar 0.3.0","title":"tukeyedar 0.3.0","text":"Added eda_rfs function (Cleveland residual-fit spread plot). Added eda_viol function generates violin plot. Added eda_jitter function generates jitter plot univariate datasets. Added eda_qqmat function generates qq plot matrix. eda_lm now outputs eda_lm class. eda_rline now outputs fitted.values class. eda_lm now accepts poly = 0. generates flat line. Can used robust = TRUE. now generates different point symbols values outside inner region inner region default now 75%. outer bounds dashed line argument, l.val removed (de-clutter plot) Removed quantile-difference plot. interpretation tricky dealing multiplicative offset.","code":""},{"path":"https://mgimond.github.io/tukeyedar/news/index.html","id":"tukeyedar-026","dir":"Changelog","previous_headings":"","what":"tukeyedar 0.2.6","title":"tukeyedar 0.2.6","text":"Added quantile-difference plot eda_qq function. Removed redundant outliers argument eda_boxls (#21).","code":""},{"path":"https://mgimond.github.io/tukeyedar/news/index.html","id":"tukeyedar-025","dir":"Changelog","previous_headings":"","what":"tukeyedar 0.2.5","title":"tukeyedar 0.2.5","text":"Added symmetry QQ option eda_qq function. Ensure re-expressions default Box-Cox method.","code":""},{"path":"https://mgimond.github.io/tukeyedar/news/index.html","id":"tukeyedar-024","dir":"Changelog","previous_headings":"","what":"tukeyedar 0.2.4","title":"tukeyedar 0.2.4","text":"Added polynomial option eda_lm function. Added robust fitting option eda_lm function (uses MASS::rlm)","code":""},{"path":"https://mgimond.github.io/tukeyedar/news/index.html","id":"tukeyedar-023","dir":"Changelog","previous_headings":"","what":"tukeyedar 0.2.3","title":"tukeyedar 0.2.3","text":"Added show.par option eda_qq fixed issue #17.","code":""},{"path":"https://mgimond.github.io/tukeyedar/news/index.html","id":"tukeyedar-022","dir":"Changelog","previous_headings":"","what":"tukeyedar 0.2.2","title":"tukeyedar 0.2.2","text":"Re-wrote eda_rline function. also fixed issue #15.","code":""},{"path":"https://mgimond.github.io/tukeyedar/news/index.html","id":"tukeyedar-021","dir":"Changelog","previous_headings":"","what":"tukeyedar 0.2.1","title":"tukeyedar 0.2.1","text":"Added option plot density distribution alongside Normal fit eda_normfit.","code":""},{"path":"https://mgimond.github.io/tukeyedar/news/index.html","id":"tukeyedar-020","dir":"Changelog","previous_headings":"","what":"tukeyedar 0.2.0","title":"tukeyedar 0.2.0","text":"Added Normal QQ plot option eda_qq. Added symmetrical Normal fit plot function eda_normfit. Updated eda_boxls aesthetics. Updated median polish diagnostic plot aesthetics.","code":""},{"path":"https://mgimond.github.io/tukeyedar/news/index.html","id":"tukeyedar-011","dir":"Changelog","previous_headings":"","what":"tukeyedar 0.1.1","title":"tukeyedar 0.1.1","text":"Introduces median polish function eda_pol. Introduces QQ Tukey mean-difference plot eda_qq. Introduces density plot function eda_dens. Adds re-expression parameters eda_lm via parameters px py. Adds sd labels SD dashed lines eda_lm. eda_lm now output lm intercept slope. Adds plot method eda_rline object. eda_re p = 1, box-cox option ignored. Homogenized plot appearances. Added power parameter argument eda_boxls. Added power parameter argument eda_sl. Added plot option eda_sl.","code":""},{"path":"https://mgimond.github.io/tukeyedar/news/index.html","id":"tukeyedar-010","dir":"Changelog","previous_headings":"","what":"tukeyedar 0.1.0","title":"tukeyedar 0.1.0","text":"Initial release tukeyedar","code":""}]
