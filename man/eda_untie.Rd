% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/eda_untie.R
\name{eda_untie}
\alias{eda_untie}
\title{Resolve Ties in a Numeric Vector}
\usage{
eda_untie(dat, x = NULL, fac = NULL, f = 0.01, rand = TRUE, ...)
}
\arguments{
\item{dat}{A data frame or a numeric vector containing values that may
have ties.}

\item{x}{Column containing values that may have ties. Ignored if \code{dat}
is a numeric vector.}

\item{fac}{Column of categorical values . Ignored if \code{dat} is a numeric
vector.}

\item{f}{A numeric value specifying the fraction of the range of \code{x} to
use for adjustments. Must be between 0 and 1.}

\item{rand}{A logical value. If \code{FALSE}, all adjustments are of fixed
size based on \code{f}. If \code{TRUE}, the adjustments are randomized
within the range specified by \code{f}.}

\item{...}{not used.}
}
\value{
A numeric vector of the same length as \code{x}, with ties adjusted.
}
\description{
Adjusts tied values in a numeric vector by adding or subtracting
  a small fraction of the range.
}
\details{
The function identifies tied values in the input vector \code{x}
and perturbs them to break the ties.
If \code{rand = TRUE}, the adjustment for each tied value is randomized
uniformly with the lower and uper bounds defined by
\code{[0, f * diff(range(x))]}. If \code{rand = FALSE}, the adjustment is
deterministic and equal to \code{+/- f * diff(range(x))}. Alternating signs
(\code{-1} and \code{1}) are used to distribute adjustments symmetrically.
The deterministic approach may not eliminate all ties. For example, if four
values are tied, the output will split the values into two tied values.
Repeating the process on the output as needed will eliminate all remaining
ties.
}
\examples{
set.seed(42)
x <- c(1, 2, 2, 2, 3, 4, 4, 5)
# Randomized adjustments
x1 <- eda_untie(x, f = 0.01, rand = TRUE)
x1

# Deterministic adjustments
x2 <- eda_untie(x, f = 0.01, rand = FALSE)
x2
x3 <- eda_untie(x2, f = 0.01, rand = FALSE)
x3

# Adjusting an entire dataframe. Add up to +/- 0.5 inches to
# singer height values
set.seed(17)
singer <- lattice::singer
factor <- 0.5 / diff(range(singer$height))
eda_jitter(singer, height, voice.part, reorder = FALSE)
singer$notie <- eda_untie(singer, height, voice.part, f = factor)
eda_jitter(singer, notie, voice.part, reorder = FALSE)
}
